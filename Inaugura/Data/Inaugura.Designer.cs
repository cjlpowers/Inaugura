//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.85
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Inaugura.Data {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private CompaniesDataTable tableCompanies;
        
        private ZonesDataTable tableZones;
        
        private AgentsDataTable tableAgents;
        
        private ListingsDataTable tableListings;
        
        private VoiceMailDataTable tableVoiceMail;
        
        private AgentPhoneLookupDataTable tableAgentPhoneLookup;
        
        private VoiceMailFilesDataTable tableVoiceMailFiles;
        
        private AgentPrefixLookupDataTable tableAgentPrefixLookup;
        
        private ListingLookupDataTable tableListingLookup;
        
        private ListingFilesDataTable tableListingFiles;
        
        private ListingCallLogDataTable tableListingCallLog;
        
        private CompanyFilesDataTable tableCompanyFiles;
        
        private AgentFilesDataTable tableAgentFiles;
        
        private CompanyPhoneLookupDataTable tableCompanyPhoneLookup;
        
        private CustomersDataTable tableCustomers;
        
        private System.Data.DataRelation relationFK_Customers_Agents;
        
        private System.Data.DataRelation relationFK_RealEstateAgents_RealEstateListings;
        
        private System.Data.DataRelation relationFK_RealEstateAgents_VoiceMail;
        
        private System.Data.DataRelation relationFK_Agents_AgentPhoneLookup;
        
        private System.Data.DataRelation relationFK_VoiceMail_VoiceMailFiles;
        
        private System.Data.DataRelation relationFK_Agents_AgentPrefixLookup;
        
        private System.Data.DataRelation relationFK_Zones_ListingLookup;
        
        private System.Data.DataRelation relationFK_Listings_ListingLookup;
        
        private System.Data.DataRelation relationFK_Listings_ListingFiles;
        
        private System.Data.DataRelation relationFK_Listings_ListingCallLog;
        
        private System.Data.DataRelation relationFK_Companies_CompanyFiles;
        
        private System.Data.DataRelation relationFK_Agents_AgentFiles;
        
        private System.Data.DataRelation relationFK_Companies_CompanyPhoneLookup;
        
        private System.Data.DataRelation relationFK_Companies_Customers;
        
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Companies"] != null)) {
                    base.Tables.Add(new CompaniesDataTable(ds.Tables["Companies"]));
                }
                if ((ds.Tables["Zones"] != null)) {
                    base.Tables.Add(new ZonesDataTable(ds.Tables["Zones"]));
                }
                if ((ds.Tables["Agents"] != null)) {
                    base.Tables.Add(new AgentsDataTable(ds.Tables["Agents"]));
                }
                if ((ds.Tables["Listings"] != null)) {
                    base.Tables.Add(new ListingsDataTable(ds.Tables["Listings"]));
                }
                if ((ds.Tables["VoiceMail"] != null)) {
                    base.Tables.Add(new VoiceMailDataTable(ds.Tables["VoiceMail"]));
                }
                if ((ds.Tables["AgentPhoneLookup"] != null)) {
                    base.Tables.Add(new AgentPhoneLookupDataTable(ds.Tables["AgentPhoneLookup"]));
                }
                if ((ds.Tables["VoiceMailFiles"] != null)) {
                    base.Tables.Add(new VoiceMailFilesDataTable(ds.Tables["VoiceMailFiles"]));
                }
                if ((ds.Tables["AgentPrefixLookup"] != null)) {
                    base.Tables.Add(new AgentPrefixLookupDataTable(ds.Tables["AgentPrefixLookup"]));
                }
                if ((ds.Tables["ListingLookup"] != null)) {
                    base.Tables.Add(new ListingLookupDataTable(ds.Tables["ListingLookup"]));
                }
                if ((ds.Tables["ListingFiles"] != null)) {
                    base.Tables.Add(new ListingFilesDataTable(ds.Tables["ListingFiles"]));
                }
                if ((ds.Tables["ListingCallLog"] != null)) {
                    base.Tables.Add(new ListingCallLogDataTable(ds.Tables["ListingCallLog"]));
                }
                if ((ds.Tables["CompanyFiles"] != null)) {
                    base.Tables.Add(new CompanyFilesDataTable(ds.Tables["CompanyFiles"]));
                }
                if ((ds.Tables["AgentFiles"] != null)) {
                    base.Tables.Add(new AgentFilesDataTable(ds.Tables["AgentFiles"]));
                }
                if ((ds.Tables["CompanyPhoneLookup"] != null)) {
                    base.Tables.Add(new CompanyPhoneLookupDataTable(ds.Tables["CompanyPhoneLookup"]));
                }
                if ((ds.Tables["Customers"] != null)) {
                    base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompaniesDataTable Companies {
            get {
                return this.tableCompanies;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZonesDataTable Zones {
            get {
                return this.tableZones;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentsDataTable Agents {
            get {
                return this.tableAgents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListingsDataTable Listings {
            get {
                return this.tableListings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VoiceMailDataTable VoiceMail {
            get {
                return this.tableVoiceMail;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentPhoneLookupDataTable AgentPhoneLookup {
            get {
                return this.tableAgentPhoneLookup;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VoiceMailFilesDataTable VoiceMailFiles {
            get {
                return this.tableVoiceMailFiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentPrefixLookupDataTable AgentPrefixLookup {
            get {
                return this.tableAgentPrefixLookup;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListingLookupDataTable ListingLookup {
            get {
                return this.tableListingLookup;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListingFilesDataTable ListingFiles {
            get {
                return this.tableListingFiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListingCallLogDataTable ListingCallLog {
            get {
                return this.tableListingCallLog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyFilesDataTable CompanyFiles {
            get {
                return this.tableCompanyFiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentFilesDataTable AgentFiles {
            get {
                return this.tableAgentFiles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyPhoneLookupDataTable CompanyPhoneLookup {
            get {
                return this.tableCompanyPhoneLookup;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomersDataTable Customers {
            get {
                return this.tableCustomers;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Companies"] != null)) {
                base.Tables.Add(new CompaniesDataTable(ds.Tables["Companies"]));
            }
            if ((ds.Tables["Zones"] != null)) {
                base.Tables.Add(new ZonesDataTable(ds.Tables["Zones"]));
            }
            if ((ds.Tables["Agents"] != null)) {
                base.Tables.Add(new AgentsDataTable(ds.Tables["Agents"]));
            }
            if ((ds.Tables["Listings"] != null)) {
                base.Tables.Add(new ListingsDataTable(ds.Tables["Listings"]));
            }
            if ((ds.Tables["VoiceMail"] != null)) {
                base.Tables.Add(new VoiceMailDataTable(ds.Tables["VoiceMail"]));
            }
            if ((ds.Tables["AgentPhoneLookup"] != null)) {
                base.Tables.Add(new AgentPhoneLookupDataTable(ds.Tables["AgentPhoneLookup"]));
            }
            if ((ds.Tables["VoiceMailFiles"] != null)) {
                base.Tables.Add(new VoiceMailFilesDataTable(ds.Tables["VoiceMailFiles"]));
            }
            if ((ds.Tables["AgentPrefixLookup"] != null)) {
                base.Tables.Add(new AgentPrefixLookupDataTable(ds.Tables["AgentPrefixLookup"]));
            }
            if ((ds.Tables["ListingLookup"] != null)) {
                base.Tables.Add(new ListingLookupDataTable(ds.Tables["ListingLookup"]));
            }
            if ((ds.Tables["ListingFiles"] != null)) {
                base.Tables.Add(new ListingFilesDataTable(ds.Tables["ListingFiles"]));
            }
            if ((ds.Tables["ListingCallLog"] != null)) {
                base.Tables.Add(new ListingCallLogDataTable(ds.Tables["ListingCallLog"]));
            }
            if ((ds.Tables["CompanyFiles"] != null)) {
                base.Tables.Add(new CompanyFilesDataTable(ds.Tables["CompanyFiles"]));
            }
            if ((ds.Tables["AgentFiles"] != null)) {
                base.Tables.Add(new AgentFilesDataTable(ds.Tables["AgentFiles"]));
            }
            if ((ds.Tables["CompanyPhoneLookup"] != null)) {
                base.Tables.Add(new CompanyPhoneLookupDataTable(ds.Tables["CompanyPhoneLookup"]));
            }
            if ((ds.Tables["Customers"] != null)) {
                base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableCompanies = ((CompaniesDataTable)(base.Tables["Companies"]));
            if ((initTable == true)) {
                if ((this.tableCompanies != null)) {
                    this.tableCompanies.InitVars();
                }
            }
            this.tableZones = ((ZonesDataTable)(base.Tables["Zones"]));
            if ((initTable == true)) {
                if ((this.tableZones != null)) {
                    this.tableZones.InitVars();
                }
            }
            this.tableAgents = ((AgentsDataTable)(base.Tables["Agents"]));
            if ((initTable == true)) {
                if ((this.tableAgents != null)) {
                    this.tableAgents.InitVars();
                }
            }
            this.tableListings = ((ListingsDataTable)(base.Tables["Listings"]));
            if ((initTable == true)) {
                if ((this.tableListings != null)) {
                    this.tableListings.InitVars();
                }
            }
            this.tableVoiceMail = ((VoiceMailDataTable)(base.Tables["VoiceMail"]));
            if ((initTable == true)) {
                if ((this.tableVoiceMail != null)) {
                    this.tableVoiceMail.InitVars();
                }
            }
            this.tableAgentPhoneLookup = ((AgentPhoneLookupDataTable)(base.Tables["AgentPhoneLookup"]));
            if ((initTable == true)) {
                if ((this.tableAgentPhoneLookup != null)) {
                    this.tableAgentPhoneLookup.InitVars();
                }
            }
            this.tableVoiceMailFiles = ((VoiceMailFilesDataTable)(base.Tables["VoiceMailFiles"]));
            if ((initTable == true)) {
                if ((this.tableVoiceMailFiles != null)) {
                    this.tableVoiceMailFiles.InitVars();
                }
            }
            this.tableAgentPrefixLookup = ((AgentPrefixLookupDataTable)(base.Tables["AgentPrefixLookup"]));
            if ((initTable == true)) {
                if ((this.tableAgentPrefixLookup != null)) {
                    this.tableAgentPrefixLookup.InitVars();
                }
            }
            this.tableListingLookup = ((ListingLookupDataTable)(base.Tables["ListingLookup"]));
            if ((initTable == true)) {
                if ((this.tableListingLookup != null)) {
                    this.tableListingLookup.InitVars();
                }
            }
            this.tableListingFiles = ((ListingFilesDataTable)(base.Tables["ListingFiles"]));
            if ((initTable == true)) {
                if ((this.tableListingFiles != null)) {
                    this.tableListingFiles.InitVars();
                }
            }
            this.tableListingCallLog = ((ListingCallLogDataTable)(base.Tables["ListingCallLog"]));
            if ((initTable == true)) {
                if ((this.tableListingCallLog != null)) {
                    this.tableListingCallLog.InitVars();
                }
            }
            this.tableCompanyFiles = ((CompanyFilesDataTable)(base.Tables["CompanyFiles"]));
            if ((initTable == true)) {
                if ((this.tableCompanyFiles != null)) {
                    this.tableCompanyFiles.InitVars();
                }
            }
            this.tableAgentFiles = ((AgentFilesDataTable)(base.Tables["AgentFiles"]));
            if ((initTable == true)) {
                if ((this.tableAgentFiles != null)) {
                    this.tableAgentFiles.InitVars();
                }
            }
            this.tableCompanyPhoneLookup = ((CompanyPhoneLookupDataTable)(base.Tables["CompanyPhoneLookup"]));
            if ((initTable == true)) {
                if ((this.tableCompanyPhoneLookup != null)) {
                    this.tableCompanyPhoneLookup.InitVars();
                }
            }
            this.tableCustomers = ((CustomersDataTable)(base.Tables["Customers"]));
            if ((initTable == true)) {
                if ((this.tableCustomers != null)) {
                    this.tableCustomers.InitVars();
                }
            }
            this.relationFK_Customers_Agents = this.Relations["FK_Customers_Agents"];
            this.relationFK_RealEstateAgents_RealEstateListings = this.Relations["FK_RealEstateAgents_RealEstateListings"];
            this.relationFK_RealEstateAgents_VoiceMail = this.Relations["FK_RealEstateAgents_VoiceMail"];
            this.relationFK_Agents_AgentPhoneLookup = this.Relations["FK_Agents_AgentPhoneLookup"];
            this.relationFK_VoiceMail_VoiceMailFiles = this.Relations["FK_VoiceMail_VoiceMailFiles"];
            this.relationFK_Agents_AgentPrefixLookup = this.Relations["FK_Agents_AgentPrefixLookup"];
            this.relationFK_Zones_ListingLookup = this.Relations["FK_Zones_ListingLookup"];
            this.relationFK_Listings_ListingLookup = this.Relations["FK_Listings_ListingLookup"];
            this.relationFK_Listings_ListingFiles = this.Relations["FK_Listings_ListingFiles"];
            this.relationFK_Listings_ListingCallLog = this.Relations["FK_Listings_ListingCallLog"];
            this.relationFK_Companies_CompanyFiles = this.Relations["FK_Companies_CompanyFiles"];
            this.relationFK_Agents_AgentFiles = this.Relations["FK_Agents_AgentFiles"];
            this.relationFK_Companies_CompanyPhoneLookup = this.Relations["FK_Companies_CompanyPhoneLookup"];
            this.relationFK_Companies_Customers = this.Relations["FK_Companies_Customers"];
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCompanies = new CompaniesDataTable();
            base.Tables.Add(this.tableCompanies);
            this.tableZones = new ZonesDataTable();
            base.Tables.Add(this.tableZones);
            this.tableAgents = new AgentsDataTable();
            base.Tables.Add(this.tableAgents);
            this.tableListings = new ListingsDataTable();
            base.Tables.Add(this.tableListings);
            this.tableVoiceMail = new VoiceMailDataTable();
            base.Tables.Add(this.tableVoiceMail);
            this.tableAgentPhoneLookup = new AgentPhoneLookupDataTable();
            base.Tables.Add(this.tableAgentPhoneLookup);
            this.tableVoiceMailFiles = new VoiceMailFilesDataTable();
            base.Tables.Add(this.tableVoiceMailFiles);
            this.tableAgentPrefixLookup = new AgentPrefixLookupDataTable();
            base.Tables.Add(this.tableAgentPrefixLookup);
            this.tableListingLookup = new ListingLookupDataTable();
            base.Tables.Add(this.tableListingLookup);
            this.tableListingFiles = new ListingFilesDataTable();
            base.Tables.Add(this.tableListingFiles);
            this.tableListingCallLog = new ListingCallLogDataTable();
            base.Tables.Add(this.tableListingCallLog);
            this.tableCompanyFiles = new CompanyFilesDataTable();
            base.Tables.Add(this.tableCompanyFiles);
            this.tableAgentFiles = new AgentFilesDataTable();
            base.Tables.Add(this.tableAgentFiles);
            this.tableCompanyPhoneLookup = new CompanyPhoneLookupDataTable();
            base.Tables.Add(this.tableCompanyPhoneLookup);
            this.tableCustomers = new CustomersDataTable();
            base.Tables.Add(this.tableCustomers);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Customers_Agents", new System.Data.DataColumn[] {
                        this.tableCustomers.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgents.customerIDColumn});
            this.tableAgents.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_RealEstateAgents_RealEstateListings", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListings.agentIDColumn});
            this.tableListings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_RealEstateAgents_VoiceMail", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableVoiceMail.agentIDColumn});
            this.tableVoiceMail.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Agents_AgentPhoneLookup", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentPhoneLookup.agentIDColumn});
            this.tableAgentPhoneLookup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_VoiceMail_VoiceMailFiles", new System.Data.DataColumn[] {
                        this.tableVoiceMail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableVoiceMailFiles.voiceMailIDColumn});
            this.tableVoiceMailFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Agents_AgentPrefixLookup", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentPrefixLookup.agentIDColumn});
            this.tableAgentPrefixLookup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Zones_ListingLookup", new System.Data.DataColumn[] {
                        this.tableZones.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingLookup.zoneIDColumn});
            this.tableListingLookup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Listings_ListingLookup", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingLookup.listingIDColumn});
            this.tableListingLookup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Listings_ListingFiles", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingFiles.listinglIDColumn});
            this.tableListingFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Listings_ListingCallLog", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingCallLog.listinglIDColumn});
            this.tableListingCallLog.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Companies_CompanyFiles", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCompanyFiles.companyIDColumn});
            this.tableCompanyFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Agents_AgentFiles", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentFiles.agentIDColumn});
            this.tableAgentFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Companies_CompanyPhoneLookup", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCompanyPhoneLookup.companyIDColumn});
            this.tableCompanyPhoneLookup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Companies_Customers", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCustomers.companyIDColumn});
            this.tableCustomers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Customers_Agents = new System.Data.DataRelation("FK_Customers_Agents", new System.Data.DataColumn[] {
                        this.tableCustomers.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgents.customerIDColumn}, false);
            this.Relations.Add(this.relationFK_Customers_Agents);
            this.relationFK_RealEstateAgents_RealEstateListings = new System.Data.DataRelation("FK_RealEstateAgents_RealEstateListings", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListings.agentIDColumn}, false);
            this.Relations.Add(this.relationFK_RealEstateAgents_RealEstateListings);
            this.relationFK_RealEstateAgents_VoiceMail = new System.Data.DataRelation("FK_RealEstateAgents_VoiceMail", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableVoiceMail.agentIDColumn}, false);
            this.Relations.Add(this.relationFK_RealEstateAgents_VoiceMail);
            this.relationFK_Agents_AgentPhoneLookup = new System.Data.DataRelation("FK_Agents_AgentPhoneLookup", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentPhoneLookup.agentIDColumn}, false);
            this.Relations.Add(this.relationFK_Agents_AgentPhoneLookup);
            this.relationFK_VoiceMail_VoiceMailFiles = new System.Data.DataRelation("FK_VoiceMail_VoiceMailFiles", new System.Data.DataColumn[] {
                        this.tableVoiceMail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableVoiceMailFiles.voiceMailIDColumn}, false);
            this.Relations.Add(this.relationFK_VoiceMail_VoiceMailFiles);
            this.relationFK_Agents_AgentPrefixLookup = new System.Data.DataRelation("FK_Agents_AgentPrefixLookup", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentPrefixLookup.agentIDColumn}, false);
            this.Relations.Add(this.relationFK_Agents_AgentPrefixLookup);
            this.relationFK_Zones_ListingLookup = new System.Data.DataRelation("FK_Zones_ListingLookup", new System.Data.DataColumn[] {
                        this.tableZones.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingLookup.zoneIDColumn}, false);
            this.Relations.Add(this.relationFK_Zones_ListingLookup);
            this.relationFK_Listings_ListingLookup = new System.Data.DataRelation("FK_Listings_ListingLookup", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingLookup.listingIDColumn}, false);
            this.Relations.Add(this.relationFK_Listings_ListingLookup);
            this.relationFK_Listings_ListingFiles = new System.Data.DataRelation("FK_Listings_ListingFiles", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingFiles.listinglIDColumn}, false);
            this.Relations.Add(this.relationFK_Listings_ListingFiles);
            this.relationFK_Listings_ListingCallLog = new System.Data.DataRelation("FK_Listings_ListingCallLog", new System.Data.DataColumn[] {
                        this.tableListings.IDColumn}, new System.Data.DataColumn[] {
                        this.tableListingCallLog.listinglIDColumn}, false);
            this.Relations.Add(this.relationFK_Listings_ListingCallLog);
            this.relationFK_Companies_CompanyFiles = new System.Data.DataRelation("FK_Companies_CompanyFiles", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCompanyFiles.companyIDColumn}, false);
            this.Relations.Add(this.relationFK_Companies_CompanyFiles);
            this.relationFK_Agents_AgentFiles = new System.Data.DataRelation("FK_Agents_AgentFiles", new System.Data.DataColumn[] {
                        this.tableAgents.IDColumn}, new System.Data.DataColumn[] {
                        this.tableAgentFiles.agentIDColumn}, false);
            this.Relations.Add(this.relationFK_Agents_AgentFiles);
            this.relationFK_Companies_CompanyPhoneLookup = new System.Data.DataRelation("FK_Companies_CompanyPhoneLookup", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCompanyPhoneLookup.companyIDColumn}, false);
            this.Relations.Add(this.relationFK_Companies_CompanyPhoneLookup);
            this.relationFK_Companies_Customers = new System.Data.DataRelation("FK_Companies_Customers", new System.Data.DataColumn[] {
                        this.tableCompanies.IDColumn}, new System.Data.DataColumn[] {
                        this.tableCustomers.companyIDColumn}, false);
            this.Relations.Add(this.relationFK_Companies_Customers);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "DataSet1");
            this.ExtendedProperties.Add("User_DataSetName", "DataSet1");
        }
        
        private bool ShouldSerializeCompanies() {
            return false;
        }
        
        private bool ShouldSerializeZones() {
            return false;
        }
        
        private bool ShouldSerializeAgents() {
            return false;
        }
        
        private bool ShouldSerializeListings() {
            return false;
        }
        
        private bool ShouldSerializeVoiceMail() {
            return false;
        }
        
        private bool ShouldSerializeAgentPhoneLookup() {
            return false;
        }
        
        private bool ShouldSerializeVoiceMailFiles() {
            return false;
        }
        
        private bool ShouldSerializeAgentPrefixLookup() {
            return false;
        }
        
        private bool ShouldSerializeListingLookup() {
            return false;
        }
        
        private bool ShouldSerializeListingFiles() {
            return false;
        }
        
        private bool ShouldSerializeListingCallLog() {
            return false;
        }
        
        private bool ShouldSerializeCompanyFiles() {
            return false;
        }
        
        private bool ShouldSerializeAgentFiles() {
            return false;
        }
        
        private bool ShouldSerializeCompanyPhoneLookup() {
            return false;
        }
        
        private bool ShouldSerializeCustomers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void CompaniesRowChangeEventHandler(object sender, CompaniesRowChangeEvent e);
        
        public delegate void ZonesRowChangeEventHandler(object sender, ZonesRowChangeEvent e);
        
        public delegate void AgentsRowChangeEventHandler(object sender, AgentsRowChangeEvent e);
        
        public delegate void ListingsRowChangeEventHandler(object sender, ListingsRowChangeEvent e);
        
        public delegate void VoiceMailRowChangeEventHandler(object sender, VoiceMailRowChangeEvent e);
        
        public delegate void AgentPhoneLookupRowChangeEventHandler(object sender, AgentPhoneLookupRowChangeEvent e);
        
        public delegate void VoiceMailFilesRowChangeEventHandler(object sender, VoiceMailFilesRowChangeEvent e);
        
        public delegate void AgentPrefixLookupRowChangeEventHandler(object sender, AgentPrefixLookupRowChangeEvent e);
        
        public delegate void ListingLookupRowChangeEventHandler(object sender, ListingLookupRowChangeEvent e);
        
        public delegate void ListingFilesRowChangeEventHandler(object sender, ListingFilesRowChangeEvent e);
        
        public delegate void ListingCallLogRowChangeEventHandler(object sender, ListingCallLogRowChangeEvent e);
        
        public delegate void CompanyFilesRowChangeEventHandler(object sender, CompanyFilesRowChangeEvent e);
        
        public delegate void AgentFilesRowChangeEventHandler(object sender, AgentFilesRowChangeEvent e);
        
        public delegate void CompanyPhoneLookupRowChangeEventHandler(object sender, CompanyPhoneLookupRowChangeEvent e);
        
        public delegate void CustomersRowChangeEventHandler(object sender, CustomersRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CompaniesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public CompaniesDataTable() {
                this.TableName = "Companies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CompaniesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CompaniesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CompaniesRow this[int index] {
                get {
                    return ((CompaniesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event nameChangeEventHandler nameChanging;
            
            public event nameChangeEventHandler nameChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event CompaniesRowChangeEventHandler CompaniesRowChanged;
            
            public event CompaniesRowChangeEventHandler CompaniesRowChanging;
            
            public event CompaniesRowChangeEventHandler CompaniesRowDeleted;
            
            public event CompaniesRowChangeEventHandler CompaniesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "name")) {
                        if ((this.nameChanging != null)) {
                            this.nameChanging(this, new nameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanging != null)) {
                                this.xmlChanging(this, new xmlChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "name")) {
                        if ((this.nameChanged != null)) {
                            this.nameChanged(this, new nameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanged != null)) {
                                this.xmlChanged(this, new xmlChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddCompaniesRow(CompaniesRow row) {
                this.Rows.Add(row);
            }
            
            public CompaniesRow AddCompaniesRow(string ID, string name, string xml) {
                CompaniesRow rowCompaniesRow = ((CompaniesRow)(this.NewRow()));
                rowCompaniesRow.ItemArray = new object[] {
                        ID,
                        name,
                        xml};
                this.Rows.Add(rowCompaniesRow);
                return rowCompaniesRow;
            }
            
            public CompaniesRow FindByID(string ID) {
                return ((CompaniesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CompaniesDataTable cln = ((CompaniesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CompaniesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnname = base.Columns["name"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.columnname.ExtendedProperties.Add("Generator_ChangedEventName", "nameChanged");
                this.columnname.ExtendedProperties.Add("Generator_ChangingEventName", "nameChanging");
                this.columnname.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "name");
                this.columnname.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "nameColumn");
                this.columnname.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnname");
                this.columnname.ExtendedProperties.Add("Generator_DelegateName", "nameChangeEventHandler");
                this.columnname.ExtendedProperties.Add("Generator_EventArgName", "nameChangeEventArg");
                this.columnname.ExtendedProperties.Add("User_ColumnName", "name");
                base.Columns.Add(this.columnname);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.Constraints.Add(new System.Data.UniqueConstraint("Key", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "CompaniesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CompaniesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CompaniesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CompaniesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Companies");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCompanies");
                this.ExtendedProperties.Add("User_TableName", "Companies");
            }
            
            public CompaniesRow NewCompaniesRow() {
                return ((CompaniesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CompaniesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompaniesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompaniesRowChanged != null)) {
                    this.CompaniesRowChanged(this, new CompaniesRowChangeEvent(((CompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompaniesRowChanging != null)) {
                    this.CompaniesRowChanging(this, new CompaniesRowChangeEvent(((CompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompaniesRowDeleted != null)) {
                    this.CompaniesRowDeleted(this, new CompaniesRowChangeEvent(((CompaniesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompaniesRowDeleting != null)) {
                    this.CompaniesRowDeleting(this, new CompaniesRowChangeEvent(((CompaniesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompaniesRow(CompaniesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CompaniesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(CompaniesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompaniesRow Row {
                    get {
                        return ((CompaniesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void nameChangeEventHandler(CompaniesDataTable sender, nameChangeEventArg e);
            
            public class nameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public nameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompaniesRow Row {
                    get {
                        return ((CompaniesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn nameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(CompaniesDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompaniesRow Row {
                    get {
                        return ((CompaniesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZonesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public ZonesDataTable() {
                this.TableName = "Zones";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ZonesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ZonesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ZonesRow this[int index] {
                get {
                    return ((ZonesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event ZonesRowChangeEventHandler ZonesRowChanged;
            
            public event ZonesRowChangeEventHandler ZonesRowChanging;
            
            public event ZonesRowChangeEventHandler ZonesRowDeleted;
            
            public event ZonesRowChangeEventHandler ZonesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "xml")) {
                        if ((this.xmlChanging != null)) {
                            this.xmlChanging(this, new xmlChangeEventArg(e));
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "xml")) {
                        if ((this.xmlChanged != null)) {
                            this.xmlChanged(this, new xmlChangeEventArg(e));
                        }
                    }
                }
            }
            
            public void AddZonesRow(ZonesRow row) {
                this.Rows.Add(row);
            }
            
            public ZonesRow AddZonesRow(string ID, string xml) {
                ZonesRow rowZonesRow = ((ZonesRow)(this.NewRow()));
                rowZonesRow.ItemArray = new object[] {
                        ID,
                        xml};
                this.Rows.Add(rowZonesRow);
                return rowZonesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ZonesDataTable cln = ((ZonesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ZonesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.Constraints.Add(new System.Data.UniqueConstraint("FilesKey111", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "ZonesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ZonesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ZonesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ZonesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Zones");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableZones");
                this.ExtendedProperties.Add("User_TableName", "Zones");
            }
            
            public ZonesRow NewZonesRow() {
                return ((ZonesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ZonesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ZonesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZonesRowChanged != null)) {
                    this.ZonesRowChanged(this, new ZonesRowChangeEvent(((ZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZonesRowChanging != null)) {
                    this.ZonesRowChanging(this, new ZonesRowChangeEvent(((ZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZonesRowDeleted != null)) {
                    this.ZonesRowDeleted(this, new ZonesRowChangeEvent(((ZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZonesRowDeleting != null)) {
                    this.ZonesRowDeleting(this, new ZonesRowChangeEvent(((ZonesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveZonesRow(ZonesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZonesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(ZonesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ZonesRow Row {
                    get {
                        return ((ZonesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(ZonesDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ZonesRow Row {
                    get {
                        return ((ZonesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columncustomerID;
            
            private System.Data.DataColumn columnpinCode;
            
            private System.Data.DataColumn columnexpirationDate;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public AgentsDataTable() {
                this.TableName = "Agents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AgentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AgentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn customerIDColumn {
                get {
                    return this.columncustomerID;
                }
            }
            
            internal System.Data.DataColumn pinCodeColumn {
                get {
                    return this.columnpinCode;
                }
            }
            
            internal System.Data.DataColumn expirationDateColumn {
                get {
                    return this.columnexpirationDate;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AgentsRow this[int index] {
                get {
                    return ((AgentsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event customerIDChangeEventHandler customerIDChanging;
            
            public event customerIDChangeEventHandler customerIDChanged;
            
            public event pinCodeChangeEventHandler pinCodeChanging;
            
            public event pinCodeChangeEventHandler pinCodeChanged;
            
            public event expirationDateChangeEventHandler expirationDateChanging;
            
            public event expirationDateChangeEventHandler expirationDateChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event AgentsRowChangeEventHandler AgentsRowChanged;
            
            public event AgentsRowChangeEventHandler AgentsRowChanging;
            
            public event AgentsRowChangeEventHandler AgentsRowDeleted;
            
            public event AgentsRowChangeEventHandler AgentsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "customerID")) {
                        if ((this.customerIDChanging != null)) {
                            this.customerIDChanging(this, new customerIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "pinCode")) {
                            if ((this.pinCodeChanging != null)) {
                                this.pinCodeChanging(this, new pinCodeChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "expirationDate")) {
                                if ((this.expirationDateChanging != null)) {
                                    this.expirationDateChanging(this, new expirationDateChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "xml")) {
                                    if ((this.xmlChanging != null)) {
                                        this.xmlChanging(this, new xmlChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "customerID")) {
                        if ((this.customerIDChanged != null)) {
                            this.customerIDChanged(this, new customerIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "pinCode")) {
                            if ((this.pinCodeChanged != null)) {
                                this.pinCodeChanged(this, new pinCodeChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "expirationDate")) {
                                if ((this.expirationDateChanged != null)) {
                                    this.expirationDateChanged(this, new expirationDateChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "xml")) {
                                    if ((this.xmlChanged != null)) {
                                        this.xmlChanged(this, new xmlChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddAgentsRow(AgentsRow row) {
                this.Rows.Add(row);
            }
            
            public AgentsRow AddAgentsRow(string ID, CustomersRow parentCustomersRowByFK_Customers_Agents, string pinCode, string expirationDate, string xml) {
                AgentsRow rowAgentsRow = ((AgentsRow)(this.NewRow()));
                rowAgentsRow.ItemArray = new object[] {
                        ID,
                        parentCustomersRowByFK_Customers_Agents[0],
                        pinCode,
                        expirationDate,
                        xml};
                this.Rows.Add(rowAgentsRow);
                return rowAgentsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AgentsDataTable cln = ((AgentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AgentsDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columncustomerID = base.Columns["customerID"];
                this.columnpinCode = base.Columns["pinCode"];
                this.columnexpirationDate = base.Columns["expirationDate"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columncustomerID = new System.Data.DataColumn("customerID", typeof(string), null, System.Data.MappingType.Element);
                this.columncustomerID.ExtendedProperties.Add("Generator_ChangedEventName", "customerIDChanged");
                this.columncustomerID.ExtendedProperties.Add("Generator_ChangingEventName", "customerIDChanging");
                this.columncustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "customerID");
                this.columncustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "customerIDColumn");
                this.columncustomerID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncustomerID");
                this.columncustomerID.ExtendedProperties.Add("Generator_DelegateName", "customerIDChangeEventHandler");
                this.columncustomerID.ExtendedProperties.Add("Generator_EventArgName", "customerIDChangeEventArg");
                this.columncustomerID.ExtendedProperties.Add("User_ColumnName", "customerID");
                base.Columns.Add(this.columncustomerID);
                this.columnpinCode = new System.Data.DataColumn("pinCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnpinCode.ExtendedProperties.Add("Generator_ChangedEventName", "pinCodeChanged");
                this.columnpinCode.ExtendedProperties.Add("Generator_ChangingEventName", "pinCodeChanging");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "pinCode");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "pinCodeColumn");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnpinCode");
                this.columnpinCode.ExtendedProperties.Add("Generator_DelegateName", "pinCodeChangeEventHandler");
                this.columnpinCode.ExtendedProperties.Add("Generator_EventArgName", "pinCodeChangeEventArg");
                this.columnpinCode.ExtendedProperties.Add("User_ColumnName", "pinCode");
                base.Columns.Add(this.columnpinCode);
                this.columnexpirationDate = new System.Data.DataColumn("expirationDate", typeof(string), null, System.Data.MappingType.Element);
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ChangedEventName", "expirationDateChanged");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ChangingEventName", "expirationDateChanging");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "expirationDate");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "expirationDateColumn");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnexpirationDate");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_DelegateName", "expirationDateChangeEventHandler");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_EventArgName", "expirationDateChangeEventArg");
                this.columnexpirationDate.ExtendedProperties.Add("User_ColumnName", "expirationDate");
                base.Columns.Add(this.columnexpirationDate);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "AgentsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "AgentsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "AgentsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "AgentsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Agents");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableAgents");
                this.ExtendedProperties.Add("User_TableName", "Agents");
            }
            
            public AgentsRow NewAgentsRow() {
                return ((AgentsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AgentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentsRowChanged != null)) {
                    this.AgentsRowChanged(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentsRowChanging != null)) {
                    this.AgentsRowChanging(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentsRowDeleted != null)) {
                    this.AgentsRowDeleted(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentsRowDeleting != null)) {
                    this.AgentsRowDeleting(this, new AgentsRowChangeEvent(((AgentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentsRow(AgentsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(AgentsDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentsRow Row {
                    get {
                        return ((AgentsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void customerIDChangeEventHandler(AgentsDataTable sender, customerIDChangeEventArg e);
            
            public class customerIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public customerIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentsRow Row {
                    get {
                        return ((AgentsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn customerIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void pinCodeChangeEventHandler(AgentsDataTable sender, pinCodeChangeEventArg e);
            
            public class pinCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public pinCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentsRow Row {
                    get {
                        return ((AgentsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn pinCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void expirationDateChangeEventHandler(AgentsDataTable sender, expirationDateChangeEventArg e);
            
            public class expirationDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public expirationDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentsRow Row {
                    get {
                        return ((AgentsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn expirationDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(AgentsDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentsRow Row {
                    get {
                        return ((AgentsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnagentID;
            
            private System.Data.DataColumn columnexpirationDate;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public ListingsDataTable() {
                this.TableName = "Listings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ListingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ListingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            internal System.Data.DataColumn expirationDateColumn {
                get {
                    return this.columnexpirationDate;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ListingsRow this[int index] {
                get {
                    return ((ListingsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event expirationDateChangeEventHandler expirationDateChanging;
            
            public event expirationDateChangeEventHandler expirationDateChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event ListingsRowChangeEventHandler ListingsRowChanged;
            
            public event ListingsRowChangeEventHandler ListingsRowChanging;
            
            public event ListingsRowChangeEventHandler ListingsRowDeleted;
            
            public event ListingsRowChangeEventHandler ListingsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanging != null)) {
                            this.agentIDChanging(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "expirationDate")) {
                            if ((this.expirationDateChanging != null)) {
                                this.expirationDateChanging(this, new expirationDateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "xml")) {
                                if ((this.xmlChanging != null)) {
                                    this.xmlChanging(this, new xmlChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanged != null)) {
                            this.agentIDChanged(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "expirationDate")) {
                            if ((this.expirationDateChanged != null)) {
                                this.expirationDateChanged(this, new expirationDateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "xml")) {
                                if ((this.xmlChanged != null)) {
                                    this.xmlChanged(this, new xmlChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddListingsRow(ListingsRow row) {
                this.Rows.Add(row);
            }
            
            public ListingsRow AddListingsRow(string ID, AgentsRow parentAgentsRowByFK_RealEstateAgents_RealEstateListings, string expirationDate, string xml) {
                ListingsRow rowListingsRow = ((ListingsRow)(this.NewRow()));
                rowListingsRow.ItemArray = new object[] {
                        ID,
                        parentAgentsRowByFK_RealEstateAgents_RealEstateListings[0],
                        expirationDate,
                        xml};
                this.Rows.Add(rowListingsRow);
                return rowListingsRow;
            }
            
            public ListingsRow FindByID(string ID) {
                return ((ListingsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ListingsDataTable cln = ((ListingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ListingsDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnagentID = base.Columns["agentID"];
                this.columnexpirationDate = base.Columns["expirationDate"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.columnexpirationDate = new System.Data.DataColumn("expirationDate", typeof(string), null, System.Data.MappingType.Element);
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ChangedEventName", "expirationDateChanged");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ChangingEventName", "expirationDateChanging");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "expirationDate");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "expirationDateColumn");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnexpirationDate");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_DelegateName", "expirationDateChangeEventHandler");
                this.columnexpirationDate.ExtendedProperties.Add("Generator_EventArgName", "expirationDateChangeEventArg");
                this.columnexpirationDate.ExtendedProperties.Add("User_ColumnName", "expirationDate");
                base.Columns.Add(this.columnexpirationDate);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "ListingsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ListingsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ListingsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ListingsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Listings");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableListings");
                this.ExtendedProperties.Add("User_TableName", "Listings");
            }
            
            public ListingsRow NewListingsRow() {
                return ((ListingsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ListingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ListingsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListingsRowChanged != null)) {
                    this.ListingsRowChanged(this, new ListingsRowChangeEvent(((ListingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListingsRowChanging != null)) {
                    this.ListingsRowChanging(this, new ListingsRowChangeEvent(((ListingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListingsRowDeleted != null)) {
                    this.ListingsRowDeleted(this, new ListingsRowChangeEvent(((ListingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListingsRowDeleting != null)) {
                    this.ListingsRowDeleting(this, new ListingsRowChangeEvent(((ListingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveListingsRow(ListingsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(ListingsDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingsRow Row {
                    get {
                        return ((ListingsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void agentIDChangeEventHandler(ListingsDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingsRow Row {
                    get {
                        return ((ListingsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void expirationDateChangeEventHandler(ListingsDataTable sender, expirationDateChangeEventArg e);
            
            public class expirationDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public expirationDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingsRow Row {
                    get {
                        return ((ListingsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn expirationDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(ListingsDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingsRow Row {
                    get {
                        return ((ListingsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VoiceMailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnagentID;
            
            private System.Data.DataColumn columndate;
            
            private System.Data.DataColumn columnstatus;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public VoiceMailDataTable() {
                this.TableName = "VoiceMail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal VoiceMailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected VoiceMailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            internal System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            internal System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public VoiceMailRow this[int index] {
                get {
                    return ((VoiceMailRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event dateChangeEventHandler dateChanging;
            
            public event dateChangeEventHandler dateChanged;
            
            public event statusChangeEventHandler statusChanging;
            
            public event statusChangeEventHandler statusChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event VoiceMailRowChangeEventHandler VoiceMailRowChanged;
            
            public event VoiceMailRowChangeEventHandler VoiceMailRowChanging;
            
            public event VoiceMailRowChangeEventHandler VoiceMailRowDeleted;
            
            public event VoiceMailRowChangeEventHandler VoiceMailRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanging != null)) {
                            this.agentIDChanging(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "date")) {
                            if ((this.dateChanging != null)) {
                                this.dateChanging(this, new dateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "status")) {
                                if ((this.statusChanging != null)) {
                                    this.statusChanging(this, new statusChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "xml")) {
                                    if ((this.xmlChanging != null)) {
                                        this.xmlChanging(this, new xmlChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanged != null)) {
                            this.agentIDChanged(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "date")) {
                            if ((this.dateChanged != null)) {
                                this.dateChanged(this, new dateChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "status")) {
                                if ((this.statusChanged != null)) {
                                    this.statusChanged(this, new statusChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "xml")) {
                                    if ((this.xmlChanged != null)) {
                                        this.xmlChanged(this, new xmlChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddVoiceMailRow(VoiceMailRow row) {
                this.Rows.Add(row);
            }
            
            public VoiceMailRow AddVoiceMailRow(string ID, AgentsRow parentAgentsRowByFK_RealEstateAgents_VoiceMail, string date, string status, string xml) {
                VoiceMailRow rowVoiceMailRow = ((VoiceMailRow)(this.NewRow()));
                rowVoiceMailRow.ItemArray = new object[] {
                        ID,
                        parentAgentsRowByFK_RealEstateAgents_VoiceMail[0],
                        date,
                        status,
                        xml};
                this.Rows.Add(rowVoiceMailRow);
                return rowVoiceMailRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                VoiceMailDataTable cln = ((VoiceMailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new VoiceMailDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnagentID = base.Columns["agentID"];
                this.columndate = base.Columns["date"];
                this.columnstatus = base.Columns["status"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.columndate = new System.Data.DataColumn("date", typeof(string), null, System.Data.MappingType.Element);
                this.columndate.ExtendedProperties.Add("Generator_ChangedEventName", "dateChanged");
                this.columndate.ExtendedProperties.Add("Generator_ChangingEventName", "dateChanging");
                this.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "date");
                this.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn");
                this.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate");
                this.columndate.ExtendedProperties.Add("Generator_DelegateName", "dateChangeEventHandler");
                this.columndate.ExtendedProperties.Add("Generator_EventArgName", "dateChangeEventArg");
                this.columndate.ExtendedProperties.Add("User_ColumnName", "date");
                base.Columns.Add(this.columndate);
                this.columnstatus = new System.Data.DataColumn("status", typeof(string), null, System.Data.MappingType.Element);
                this.columnstatus.ExtendedProperties.Add("Generator_ChangedEventName", "statusChanged");
                this.columnstatus.ExtendedProperties.Add("Generator_ChangingEventName", "statusChanging");
                this.columnstatus.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "status");
                this.columnstatus.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "statusColumn");
                this.columnstatus.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnstatus");
                this.columnstatus.ExtendedProperties.Add("Generator_DelegateName", "statusChangeEventHandler");
                this.columnstatus.ExtendedProperties.Add("Generator_EventArgName", "statusChangeEventArg");
                this.columnstatus.ExtendedProperties.Add("User_ColumnName", "status");
                base.Columns.Add(this.columnstatus);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.Constraints.Add(new System.Data.UniqueConstraint("VoiceMailKey1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "VoiceMailRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "VoiceMailRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "VoiceMailRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "VoiceMailDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "VoiceMail");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableVoiceMail");
                this.ExtendedProperties.Add("User_TableName", "VoiceMail");
            }
            
            public VoiceMailRow NewVoiceMailRow() {
                return ((VoiceMailRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VoiceMailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VoiceMailRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VoiceMailRowChanged != null)) {
                    this.VoiceMailRowChanged(this, new VoiceMailRowChangeEvent(((VoiceMailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VoiceMailRowChanging != null)) {
                    this.VoiceMailRowChanging(this, new VoiceMailRowChangeEvent(((VoiceMailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VoiceMailRowDeleted != null)) {
                    this.VoiceMailRowDeleted(this, new VoiceMailRowChangeEvent(((VoiceMailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VoiceMailRowDeleting != null)) {
                    this.VoiceMailRowDeleting(this, new VoiceMailRowChangeEvent(((VoiceMailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVoiceMailRow(VoiceMailRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VoiceMailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(VoiceMailDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailRow Row {
                    get {
                        return ((VoiceMailRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void agentIDChangeEventHandler(VoiceMailDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailRow Row {
                    get {
                        return ((VoiceMailRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dateChangeEventHandler(VoiceMailDataTable sender, dateChangeEventArg e);
            
            public class dateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailRow Row {
                    get {
                        return ((VoiceMailRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void statusChangeEventHandler(VoiceMailDataTable sender, statusChangeEventArg e);
            
            public class statusChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public statusChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailRow Row {
                    get {
                        return ((VoiceMailRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn statusColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(VoiceMailDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailRow Row {
                    get {
                        return ((VoiceMailRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentPhoneLookupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnagentID;
            
            private System.Data.DataColumn columnphone;
            
            private bool m_suspendValidation = false;
            
            public AgentPhoneLookupDataTable() {
                this.TableName = "AgentPhoneLookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AgentPhoneLookupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AgentPhoneLookupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            internal System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AgentPhoneLookupRow this[int index] {
                get {
                    return ((AgentPhoneLookupRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event phoneChangeEventHandler phoneChanging;
            
            public event phoneChangeEventHandler phoneChanged;
            
            public event AgentPhoneLookupRowChangeEventHandler AgentPhoneLookupRowChanged;
            
            public event AgentPhoneLookupRowChangeEventHandler AgentPhoneLookupRowChanging;
            
            public event AgentPhoneLookupRowChangeEventHandler AgentPhoneLookupRowDeleted;
            
            public event AgentPhoneLookupRowChangeEventHandler AgentPhoneLookupRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "agentID")) {
                    if ((this.agentIDChanging != null)) {
                        this.agentIDChanging(this, new agentIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "phone")) {
                        if ((this.phoneChanging != null)) {
                            this.phoneChanging(this, new phoneChangeEventArg(e));
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "agentID")) {
                    if ((this.agentIDChanged != null)) {
                        this.agentIDChanged(this, new agentIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "phone")) {
                        if ((this.phoneChanged != null)) {
                            this.phoneChanged(this, new phoneChangeEventArg(e));
                        }
                    }
                }
            }
            
            public void AddAgentPhoneLookupRow(AgentPhoneLookupRow row) {
                this.Rows.Add(row);
            }
            
            public AgentPhoneLookupRow AddAgentPhoneLookupRow(AgentsRow parentAgentsRowByFK_Agents_AgentPhoneLookup, string phone) {
                AgentPhoneLookupRow rowAgentPhoneLookupRow = ((AgentPhoneLookupRow)(this.NewRow()));
                rowAgentPhoneLookupRow.ItemArray = new object[] {
                        parentAgentsRowByFK_Agents_AgentPhoneLookup[0],
                        phone};
                this.Rows.Add(rowAgentPhoneLookupRow);
                return rowAgentPhoneLookupRow;
            }
            
            public AgentPhoneLookupRow FindByphone(string phone) {
                return ((AgentPhoneLookupRow)(this.Rows.Find(new object[] {
                            phone})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AgentPhoneLookupDataTable cln = ((AgentPhoneLookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AgentPhoneLookupDataTable();
            }
            
            internal void InitVars() {
                this.columnagentID = base.Columns["agentID"];
                this.columnphone = base.Columns["phone"];
            }
            
            private void InitClass() {
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.columnphone = new System.Data.DataColumn("phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnphone.ExtendedProperties.Add("Generator_ChangedEventName", "phoneChanged");
                this.columnphone.ExtendedProperties.Add("Generator_ChangingEventName", "phoneChanging");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "phone");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "phoneColumn");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnphone");
                this.columnphone.ExtendedProperties.Add("Generator_DelegateName", "phoneChangeEventHandler");
                this.columnphone.ExtendedProperties.Add("Generator_EventArgName", "phoneChangeEventArg");
                this.columnphone.ExtendedProperties.Add("User_ColumnName", "phone");
                base.Columns.Add(this.columnphone);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnphone}, true));
                this.columnphone.AllowDBNull = false;
                this.columnphone.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "AgentPhoneLookupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "AgentPhoneLookupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "AgentPhoneLookupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "AgentPhoneLookupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "AgentPhoneLookup");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableAgentPhoneLookup");
                this.ExtendedProperties.Add("User_TableName", "AgentPhoneLookup");
            }
            
            public AgentPhoneLookupRow NewAgentPhoneLookupRow() {
                return ((AgentPhoneLookupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AgentPhoneLookupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentPhoneLookupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentPhoneLookupRowChanged != null)) {
                    this.AgentPhoneLookupRowChanged(this, new AgentPhoneLookupRowChangeEvent(((AgentPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentPhoneLookupRowChanging != null)) {
                    this.AgentPhoneLookupRowChanging(this, new AgentPhoneLookupRowChangeEvent(((AgentPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentPhoneLookupRowDeleted != null)) {
                    this.AgentPhoneLookupRowDeleted(this, new AgentPhoneLookupRowChangeEvent(((AgentPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentPhoneLookupRowDeleting != null)) {
                    this.AgentPhoneLookupRowDeleting(this, new AgentPhoneLookupRowChangeEvent(((AgentPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentPhoneLookupRow(AgentPhoneLookupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentPhoneLookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void agentIDChangeEventHandler(AgentPhoneLookupDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentPhoneLookupRow Row {
                    get {
                        return ((AgentPhoneLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void phoneChangeEventHandler(AgentPhoneLookupDataTable sender, phoneChangeEventArg e);
            
            public class phoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public phoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentPhoneLookupRow Row {
                    get {
                        return ((AgentPhoneLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn phoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VoiceMailFilesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnlength;
            
            private System.Data.DataColumn columndata;
            
            private System.Data.DataColumn columnvoiceMailID;
            
            private bool m_suspendValidation = false;
            
            public VoiceMailFilesDataTable() {
                this.TableName = "VoiceMailFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal VoiceMailFilesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected VoiceMailFilesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            internal System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            internal System.Data.DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            internal System.Data.DataColumn voiceMailIDColumn {
                get {
                    return this.columnvoiceMailID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public VoiceMailFilesRow this[int index] {
                get {
                    return ((VoiceMailFilesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event fileNameChangeEventHandler fileNameChanging;
            
            public event fileNameChangeEventHandler fileNameChanged;
            
            public event lengthChangeEventHandler lengthChanging;
            
            public event lengthChangeEventHandler lengthChanged;
            
            public event dataChangeEventHandler dataChanging;
            
            public event dataChangeEventHandler dataChanged;
            
            public event voiceMailIDChangeEventHandler voiceMailIDChanging;
            
            public event voiceMailIDChangeEventHandler voiceMailIDChanged;
            
            public event VoiceMailFilesRowChangeEventHandler VoiceMailFilesRowChanged;
            
            public event VoiceMailFilesRowChangeEventHandler VoiceMailFilesRowChanging;
            
            public event VoiceMailFilesRowChangeEventHandler VoiceMailFilesRowDeleted;
            
            public event VoiceMailFilesRowChangeEventHandler VoiceMailFilesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "fileName")) {
                        if ((this.fileNameChanging != null)) {
                            this.fileNameChanging(this, new fileNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "length")) {
                            if ((this.lengthChanging != null)) {
                                this.lengthChanging(this, new lengthChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "data")) {
                                if ((this.dataChanging != null)) {
                                    this.dataChanging(this, new dataChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "voiceMailID")) {
                                    if ((this.voiceMailIDChanging != null)) {
                                        this.voiceMailIDChanging(this, new voiceMailIDChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "fileName")) {
                        if ((this.fileNameChanged != null)) {
                            this.fileNameChanged(this, new fileNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "length")) {
                            if ((this.lengthChanged != null)) {
                                this.lengthChanged(this, new lengthChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "data")) {
                                if ((this.dataChanged != null)) {
                                    this.dataChanged(this, new dataChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "voiceMailID")) {
                                    if ((this.voiceMailIDChanged != null)) {
                                        this.voiceMailIDChanged(this, new voiceMailIDChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddVoiceMailFilesRow(VoiceMailFilesRow row) {
                this.Rows.Add(row);
            }
            
            public VoiceMailFilesRow AddVoiceMailFilesRow(string ID, string fileName, string length, string data, VoiceMailRow parentVoiceMailRowByFK_VoiceMail_VoiceMailFiles) {
                VoiceMailFilesRow rowVoiceMailFilesRow = ((VoiceMailFilesRow)(this.NewRow()));
                rowVoiceMailFilesRow.ItemArray = new object[] {
                        ID,
                        fileName,
                        length,
                        data,
                        parentVoiceMailRowByFK_VoiceMail_VoiceMailFiles[0]};
                this.Rows.Add(rowVoiceMailFilesRow);
                return rowVoiceMailFilesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                VoiceMailFilesDataTable cln = ((VoiceMailFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new VoiceMailFilesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnfileName = base.Columns["fileName"];
                this.columnlength = base.Columns["length"];
                this.columndata = base.Columns["data"];
                this.columnvoiceMailID = base.Columns["voiceMailID"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                this.columnfileName.ExtendedProperties.Add("Generator_ChangedEventName", "fileNameChanged");
                this.columnfileName.ExtendedProperties.Add("Generator_ChangingEventName", "fileNameChanging");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "fileName");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "fileNameColumn");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnfileName");
                this.columnfileName.ExtendedProperties.Add("Generator_DelegateName", "fileNameChangeEventHandler");
                this.columnfileName.ExtendedProperties.Add("Generator_EventArgName", "fileNameChangeEventArg");
                this.columnfileName.ExtendedProperties.Add("User_ColumnName", "fileName");
                base.Columns.Add(this.columnfileName);
                this.columnlength = new System.Data.DataColumn("length", typeof(string), null, System.Data.MappingType.Element);
                this.columnlength.ExtendedProperties.Add("Generator_ChangedEventName", "lengthChanged");
                this.columnlength.ExtendedProperties.Add("Generator_ChangingEventName", "lengthChanging");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "length");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "lengthColumn");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlength");
                this.columnlength.ExtendedProperties.Add("Generator_DelegateName", "lengthChangeEventHandler");
                this.columnlength.ExtendedProperties.Add("Generator_EventArgName", "lengthChangeEventArg");
                this.columnlength.ExtendedProperties.Add("User_ColumnName", "length");
                base.Columns.Add(this.columnlength);
                this.columndata = new System.Data.DataColumn("data", typeof(string), null, System.Data.MappingType.Element);
                this.columndata.ExtendedProperties.Add("Generator_ChangedEventName", "dataChanged");
                this.columndata.ExtendedProperties.Add("Generator_ChangingEventName", "dataChanging");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "data");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dataColumn");
                this.columndata.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndata");
                this.columndata.ExtendedProperties.Add("Generator_DelegateName", "dataChangeEventHandler");
                this.columndata.ExtendedProperties.Add("Generator_EventArgName", "dataChangeEventArg");
                this.columndata.ExtendedProperties.Add("User_ColumnName", "data");
                base.Columns.Add(this.columndata);
                this.columnvoiceMailID = new System.Data.DataColumn("voiceMailID", typeof(string), null, System.Data.MappingType.Element);
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_ChangedEventName", "voiceMailIDChanged");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_ChangingEventName", "voiceMailIDChanging");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "voiceMailID");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "voiceMailIDColumn");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnvoiceMailID");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_DelegateName", "voiceMailIDChangeEventHandler");
                this.columnvoiceMailID.ExtendedProperties.Add("Generator_EventArgName", "voiceMailIDChangeEventArg");
                this.columnvoiceMailID.ExtendedProperties.Add("User_ColumnName", "voiceMailID");
                base.Columns.Add(this.columnvoiceMailID);
                this.Constraints.Add(new System.Data.UniqueConstraint("FilesKey1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "VoiceMailFilesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "VoiceMailFilesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "VoiceMailFilesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "VoiceMailFilesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "VoiceMailFiles");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableVoiceMailFiles");
                this.ExtendedProperties.Add("User_TableName", "VoiceMailFiles");
            }
            
            public VoiceMailFilesRow NewVoiceMailFilesRow() {
                return ((VoiceMailFilesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VoiceMailFilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VoiceMailFilesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VoiceMailFilesRowChanged != null)) {
                    this.VoiceMailFilesRowChanged(this, new VoiceMailFilesRowChangeEvent(((VoiceMailFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VoiceMailFilesRowChanging != null)) {
                    this.VoiceMailFilesRowChanging(this, new VoiceMailFilesRowChangeEvent(((VoiceMailFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VoiceMailFilesRowDeleted != null)) {
                    this.VoiceMailFilesRowDeleted(this, new VoiceMailFilesRowChangeEvent(((VoiceMailFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VoiceMailFilesRowDeleting != null)) {
                    this.VoiceMailFilesRowDeleting(this, new VoiceMailFilesRowChangeEvent(((VoiceMailFilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVoiceMailFilesRow(VoiceMailFilesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VoiceMailFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(VoiceMailFilesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailFilesRow Row {
                    get {
                        return ((VoiceMailFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void fileNameChangeEventHandler(VoiceMailFilesDataTable sender, fileNameChangeEventArg e);
            
            public class fileNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public fileNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailFilesRow Row {
                    get {
                        return ((VoiceMailFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn fileNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void lengthChangeEventHandler(VoiceMailFilesDataTable sender, lengthChangeEventArg e);
            
            public class lengthChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public lengthChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailFilesRow Row {
                    get {
                        return ((VoiceMailFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn lengthColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dataChangeEventHandler(VoiceMailFilesDataTable sender, dataChangeEventArg e);
            
            public class dataChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dataChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailFilesRow Row {
                    get {
                        return ((VoiceMailFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dataColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void voiceMailIDChangeEventHandler(VoiceMailFilesDataTable sender, voiceMailIDChangeEventArg e);
            
            public class voiceMailIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public voiceMailIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public VoiceMailFilesRow Row {
                    get {
                        return ((VoiceMailFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn voiceMailIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentPrefixLookupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnagentID;
            
            private System.Data.DataColumn columnzoneID;
            
            private System.Data.DataColumn columnagentPrefix;
            
            private bool m_suspendValidation = false;
            
            public AgentPrefixLookupDataTable() {
                this.TableName = "AgentPrefixLookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AgentPrefixLookupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AgentPrefixLookupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            internal System.Data.DataColumn zoneIDColumn {
                get {
                    return this.columnzoneID;
                }
            }
            
            internal System.Data.DataColumn agentPrefixColumn {
                get {
                    return this.columnagentPrefix;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AgentPrefixLookupRow this[int index] {
                get {
                    return ((AgentPrefixLookupRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event zoneIDChangeEventHandler zoneIDChanging;
            
            public event zoneIDChangeEventHandler zoneIDChanged;
            
            public event agentPrefixChangeEventHandler agentPrefixChanging;
            
            public event agentPrefixChangeEventHandler agentPrefixChanged;
            
            public event AgentPrefixLookupRowChangeEventHandler AgentPrefixLookupRowChanged;
            
            public event AgentPrefixLookupRowChangeEventHandler AgentPrefixLookupRowChanging;
            
            public event AgentPrefixLookupRowChangeEventHandler AgentPrefixLookupRowDeleted;
            
            public event AgentPrefixLookupRowChangeEventHandler AgentPrefixLookupRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "agentID")) {
                    if ((this.agentIDChanging != null)) {
                        this.agentIDChanging(this, new agentIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "zoneID")) {
                        if ((this.zoneIDChanging != null)) {
                            this.zoneIDChanging(this, new zoneIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "agentPrefix")) {
                            if ((this.agentPrefixChanging != null)) {
                                this.agentPrefixChanging(this, new agentPrefixChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "agentID")) {
                    if ((this.agentIDChanged != null)) {
                        this.agentIDChanged(this, new agentIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "zoneID")) {
                        if ((this.zoneIDChanged != null)) {
                            this.zoneIDChanged(this, new zoneIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "agentPrefix")) {
                            if ((this.agentPrefixChanged != null)) {
                                this.agentPrefixChanged(this, new agentPrefixChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddAgentPrefixLookupRow(AgentPrefixLookupRow row) {
                this.Rows.Add(row);
            }
            
            public AgentPrefixLookupRow AddAgentPrefixLookupRow(AgentsRow parentAgentsRowByFK_Agents_AgentPrefixLookup, string zoneID, string agentPrefix) {
                AgentPrefixLookupRow rowAgentPrefixLookupRow = ((AgentPrefixLookupRow)(this.NewRow()));
                rowAgentPrefixLookupRow.ItemArray = new object[] {
                        parentAgentsRowByFK_Agents_AgentPrefixLookup[0],
                        zoneID,
                        agentPrefix};
                this.Rows.Add(rowAgentPrefixLookupRow);
                return rowAgentPrefixLookupRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AgentPrefixLookupDataTable cln = ((AgentPrefixLookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AgentPrefixLookupDataTable();
            }
            
            internal void InitVars() {
                this.columnagentID = base.Columns["agentID"];
                this.columnzoneID = base.Columns["zoneID"];
                this.columnagentPrefix = base.Columns["agentPrefix"];
            }
            
            private void InitClass() {
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.columnzoneID = new System.Data.DataColumn("zoneID", typeof(string), null, System.Data.MappingType.Element);
                this.columnzoneID.ExtendedProperties.Add("Generator_ChangedEventName", "zoneIDChanged");
                this.columnzoneID.ExtendedProperties.Add("Generator_ChangingEventName", "zoneIDChanging");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "zoneID");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "zoneIDColumn");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnzoneID");
                this.columnzoneID.ExtendedProperties.Add("Generator_DelegateName", "zoneIDChangeEventHandler");
                this.columnzoneID.ExtendedProperties.Add("Generator_EventArgName", "zoneIDChangeEventArg");
                this.columnzoneID.ExtendedProperties.Add("User_ColumnName", "zoneID");
                base.Columns.Add(this.columnzoneID);
                this.columnagentPrefix = new System.Data.DataColumn("agentPrefix", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentPrefix.ExtendedProperties.Add("Generator_ChangedEventName", "agentPrefixChanged");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_ChangingEventName", "agentPrefixChanging");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentPrefix");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentPrefixColumn");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentPrefix");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_DelegateName", "agentPrefixChangeEventHandler");
                this.columnagentPrefix.ExtendedProperties.Add("Generator_EventArgName", "agentPrefixChangeEventArg");
                this.columnagentPrefix.ExtendedProperties.Add("User_ColumnName", "agentPrefix");
                base.Columns.Add(this.columnagentPrefix);
                this.ExtendedProperties.Add("Generator_RowClassName", "AgentPrefixLookupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "AgentPrefixLookupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "AgentPrefixLookupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "AgentPrefixLookupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "AgentPrefixLookup");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableAgentPrefixLookup");
                this.ExtendedProperties.Add("User_TableName", "AgentPrefixLookup");
            }
            
            public AgentPrefixLookupRow NewAgentPrefixLookupRow() {
                return ((AgentPrefixLookupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AgentPrefixLookupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentPrefixLookupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentPrefixLookupRowChanged != null)) {
                    this.AgentPrefixLookupRowChanged(this, new AgentPrefixLookupRowChangeEvent(((AgentPrefixLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentPrefixLookupRowChanging != null)) {
                    this.AgentPrefixLookupRowChanging(this, new AgentPrefixLookupRowChangeEvent(((AgentPrefixLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentPrefixLookupRowDeleted != null)) {
                    this.AgentPrefixLookupRowDeleted(this, new AgentPrefixLookupRowChangeEvent(((AgentPrefixLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentPrefixLookupRowDeleting != null)) {
                    this.AgentPrefixLookupRowDeleting(this, new AgentPrefixLookupRowChangeEvent(((AgentPrefixLookupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentPrefixLookupRow(AgentPrefixLookupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentPrefixLookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void agentIDChangeEventHandler(AgentPrefixLookupDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentPrefixLookupRow Row {
                    get {
                        return ((AgentPrefixLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void zoneIDChangeEventHandler(AgentPrefixLookupDataTable sender, zoneIDChangeEventArg e);
            
            public class zoneIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public zoneIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentPrefixLookupRow Row {
                    get {
                        return ((AgentPrefixLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn zoneIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void agentPrefixChangeEventHandler(AgentPrefixLookupDataTable sender, agentPrefixChangeEventArg e);
            
            public class agentPrefixChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentPrefixChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentPrefixLookupRow Row {
                    get {
                        return ((AgentPrefixLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentPrefixColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListingLookupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlistingID;
            
            private System.Data.DataColumn columnzoneID;
            
            private System.Data.DataColumn columnpinCode;
            
            private System.Data.DataColumn columnagentID;
            
            private bool m_suspendValidation = false;
            
            public ListingLookupDataTable() {
                this.TableName = "ListingLookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ListingLookupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ListingLookupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn listingIDColumn {
                get {
                    return this.columnlistingID;
                }
            }
            
            internal System.Data.DataColumn zoneIDColumn {
                get {
                    return this.columnzoneID;
                }
            }
            
            internal System.Data.DataColumn pinCodeColumn {
                get {
                    return this.columnpinCode;
                }
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ListingLookupRow this[int index] {
                get {
                    return ((ListingLookupRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event listingIDChangeEventHandler listingIDChanging;
            
            public event listingIDChangeEventHandler listingIDChanged;
            
            public event zoneIDChangeEventHandler zoneIDChanging;
            
            public event zoneIDChangeEventHandler zoneIDChanged;
            
            public event pinCodeChangeEventHandler pinCodeChanging;
            
            public event pinCodeChangeEventHandler pinCodeChanged;
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event ListingLookupRowChangeEventHandler ListingLookupRowChanged;
            
            public event ListingLookupRowChangeEventHandler ListingLookupRowChanging;
            
            public event ListingLookupRowChangeEventHandler ListingLookupRowDeleted;
            
            public event ListingLookupRowChangeEventHandler ListingLookupRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "listingID")) {
                    if ((this.listingIDChanging != null)) {
                        this.listingIDChanging(this, new listingIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "zoneID")) {
                        if ((this.zoneIDChanging != null)) {
                            this.zoneIDChanging(this, new zoneIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "pinCode")) {
                            if ((this.pinCodeChanging != null)) {
                                this.pinCodeChanging(this, new pinCodeChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "agentID")) {
                                if ((this.agentIDChanging != null)) {
                                    this.agentIDChanging(this, new agentIDChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "listingID")) {
                    if ((this.listingIDChanged != null)) {
                        this.listingIDChanged(this, new listingIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "zoneID")) {
                        if ((this.zoneIDChanged != null)) {
                            this.zoneIDChanged(this, new zoneIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "pinCode")) {
                            if ((this.pinCodeChanged != null)) {
                                this.pinCodeChanged(this, new pinCodeChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "agentID")) {
                                if ((this.agentIDChanged != null)) {
                                    this.agentIDChanged(this, new agentIDChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddListingLookupRow(ListingLookupRow row) {
                this.Rows.Add(row);
            }
            
            public ListingLookupRow AddListingLookupRow(ListingsRow parentListingsRowByFK_Listings_ListingLookup, ZonesRow parentZonesRowByFK_Zones_ListingLookup, string pinCode, string agentID) {
                ListingLookupRow rowListingLookupRow = ((ListingLookupRow)(this.NewRow()));
                rowListingLookupRow.ItemArray = new object[] {
                        parentListingsRowByFK_Listings_ListingLookup[0],
                        parentZonesRowByFK_Zones_ListingLookup[0],
                        pinCode,
                        agentID};
                this.Rows.Add(rowListingLookupRow);
                return rowListingLookupRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ListingLookupDataTable cln = ((ListingLookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ListingLookupDataTable();
            }
            
            internal void InitVars() {
                this.columnlistingID = base.Columns["listingID"];
                this.columnzoneID = base.Columns["zoneID"];
                this.columnpinCode = base.Columns["pinCode"];
                this.columnagentID = base.Columns["agentID"];
            }
            
            private void InitClass() {
                this.columnlistingID = new System.Data.DataColumn("listingID", typeof(string), null, System.Data.MappingType.Element);
                this.columnlistingID.ExtendedProperties.Add("Generator_ChangedEventName", "listingIDChanged");
                this.columnlistingID.ExtendedProperties.Add("Generator_ChangingEventName", "listingIDChanging");
                this.columnlistingID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "listingID");
                this.columnlistingID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "listingIDColumn");
                this.columnlistingID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlistingID");
                this.columnlistingID.ExtendedProperties.Add("Generator_DelegateName", "listingIDChangeEventHandler");
                this.columnlistingID.ExtendedProperties.Add("Generator_EventArgName", "listingIDChangeEventArg");
                this.columnlistingID.ExtendedProperties.Add("User_ColumnName", "listingID");
                base.Columns.Add(this.columnlistingID);
                this.columnzoneID = new System.Data.DataColumn("zoneID", typeof(string), null, System.Data.MappingType.Element);
                this.columnzoneID.ExtendedProperties.Add("Generator_ChangedEventName", "zoneIDChanged");
                this.columnzoneID.ExtendedProperties.Add("Generator_ChangingEventName", "zoneIDChanging");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "zoneID");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "zoneIDColumn");
                this.columnzoneID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnzoneID");
                this.columnzoneID.ExtendedProperties.Add("Generator_DelegateName", "zoneIDChangeEventHandler");
                this.columnzoneID.ExtendedProperties.Add("Generator_EventArgName", "zoneIDChangeEventArg");
                this.columnzoneID.ExtendedProperties.Add("User_ColumnName", "zoneID");
                base.Columns.Add(this.columnzoneID);
                this.columnpinCode = new System.Data.DataColumn("pinCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnpinCode.ExtendedProperties.Add("Generator_ChangedEventName", "pinCodeChanged");
                this.columnpinCode.ExtendedProperties.Add("Generator_ChangingEventName", "pinCodeChanging");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "pinCode");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "pinCodeColumn");
                this.columnpinCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnpinCode");
                this.columnpinCode.ExtendedProperties.Add("Generator_DelegateName", "pinCodeChangeEventHandler");
                this.columnpinCode.ExtendedProperties.Add("Generator_EventArgName", "pinCodeChangeEventArg");
                this.columnpinCode.ExtendedProperties.Add("User_ColumnName", "pinCode");
                base.Columns.Add(this.columnpinCode);
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.ExtendedProperties.Add("Generator_RowClassName", "ListingLookupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ListingLookupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ListingLookupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ListingLookupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "ListingLookup");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableListingLookup");
                this.ExtendedProperties.Add("User_TableName", "ListingLookup");
            }
            
            public ListingLookupRow NewListingLookupRow() {
                return ((ListingLookupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ListingLookupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ListingLookupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListingLookupRowChanged != null)) {
                    this.ListingLookupRowChanged(this, new ListingLookupRowChangeEvent(((ListingLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListingLookupRowChanging != null)) {
                    this.ListingLookupRowChanging(this, new ListingLookupRowChangeEvent(((ListingLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListingLookupRowDeleted != null)) {
                    this.ListingLookupRowDeleted(this, new ListingLookupRowChangeEvent(((ListingLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListingLookupRowDeleting != null)) {
                    this.ListingLookupRowDeleting(this, new ListingLookupRowChangeEvent(((ListingLookupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveListingLookupRow(ListingLookupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListingLookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void listingIDChangeEventHandler(ListingLookupDataTable sender, listingIDChangeEventArg e);
            
            public class listingIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public listingIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingLookupRow Row {
                    get {
                        return ((ListingLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn listingIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void zoneIDChangeEventHandler(ListingLookupDataTable sender, zoneIDChangeEventArg e);
            
            public class zoneIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public zoneIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingLookupRow Row {
                    get {
                        return ((ListingLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn zoneIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void pinCodeChangeEventHandler(ListingLookupDataTable sender, pinCodeChangeEventArg e);
            
            public class pinCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public pinCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingLookupRow Row {
                    get {
                        return ((ListingLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn pinCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void agentIDChangeEventHandler(ListingLookupDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingLookupRow Row {
                    get {
                        return ((ListingLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListingFilesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnlistinglID;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnlength;
            
            private System.Data.DataColumn columndata;
            
            private bool m_suspendValidation = false;
            
            public ListingFilesDataTable() {
                this.TableName = "ListingFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ListingFilesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ListingFilesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn listinglIDColumn {
                get {
                    return this.columnlistinglID;
                }
            }
            
            internal System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            internal System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            internal System.Data.DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ListingFilesRow this[int index] {
                get {
                    return ((ListingFilesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event listinglIDChangeEventHandler listinglIDChanging;
            
            public event listinglIDChangeEventHandler listinglIDChanged;
            
            public event fileNameChangeEventHandler fileNameChanging;
            
            public event fileNameChangeEventHandler fileNameChanged;
            
            public event lengthChangeEventHandler lengthChanging;
            
            public event lengthChangeEventHandler lengthChanged;
            
            public event dataChangeEventHandler dataChanging;
            
            public event dataChangeEventHandler dataChanged;
            
            public event ListingFilesRowChangeEventHandler ListingFilesRowChanged;
            
            public event ListingFilesRowChangeEventHandler ListingFilesRowChanging;
            
            public event ListingFilesRowChangeEventHandler ListingFilesRowDeleted;
            
            public event ListingFilesRowChangeEventHandler ListingFilesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "listinglID")) {
                        if ((this.listinglIDChanging != null)) {
                            this.listinglIDChanging(this, new listinglIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanging != null)) {
                                this.fileNameChanging(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanging != null)) {
                                    this.lengthChanging(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanging != null)) {
                                        this.dataChanging(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "listinglID")) {
                        if ((this.listinglIDChanged != null)) {
                            this.listinglIDChanged(this, new listinglIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanged != null)) {
                                this.fileNameChanged(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanged != null)) {
                                    this.lengthChanged(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanged != null)) {
                                        this.dataChanged(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddListingFilesRow(ListingFilesRow row) {
                this.Rows.Add(row);
            }
            
            public ListingFilesRow AddListingFilesRow(string ID, ListingsRow parentListingsRowByFK_Listings_ListingFiles, string fileName, string length, string data) {
                ListingFilesRow rowListingFilesRow = ((ListingFilesRow)(this.NewRow()));
                rowListingFilesRow.ItemArray = new object[] {
                        ID,
                        parentListingsRowByFK_Listings_ListingFiles[0],
                        fileName,
                        length,
                        data};
                this.Rows.Add(rowListingFilesRow);
                return rowListingFilesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ListingFilesDataTable cln = ((ListingFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ListingFilesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnlistinglID = base.Columns["listinglID"];
                this.columnfileName = base.Columns["fileName"];
                this.columnlength = base.Columns["length"];
                this.columndata = base.Columns["data"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnlistinglID = new System.Data.DataColumn("listinglID", typeof(string), null, System.Data.MappingType.Element);
                this.columnlistinglID.ExtendedProperties.Add("Generator_ChangedEventName", "listinglIDChanged");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ChangingEventName", "listinglIDChanging");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "listinglID");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "listinglIDColumn");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlistinglID");
                this.columnlistinglID.ExtendedProperties.Add("Generator_DelegateName", "listinglIDChangeEventHandler");
                this.columnlistinglID.ExtendedProperties.Add("Generator_EventArgName", "listinglIDChangeEventArg");
                this.columnlistinglID.ExtendedProperties.Add("User_ColumnName", "listinglID");
                base.Columns.Add(this.columnlistinglID);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                this.columnfileName.ExtendedProperties.Add("Generator_ChangedEventName", "fileNameChanged");
                this.columnfileName.ExtendedProperties.Add("Generator_ChangingEventName", "fileNameChanging");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "fileName");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "fileNameColumn");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnfileName");
                this.columnfileName.ExtendedProperties.Add("Generator_DelegateName", "fileNameChangeEventHandler");
                this.columnfileName.ExtendedProperties.Add("Generator_EventArgName", "fileNameChangeEventArg");
                this.columnfileName.ExtendedProperties.Add("User_ColumnName", "fileName");
                base.Columns.Add(this.columnfileName);
                this.columnlength = new System.Data.DataColumn("length", typeof(string), null, System.Data.MappingType.Element);
                this.columnlength.ExtendedProperties.Add("Generator_ChangedEventName", "lengthChanged");
                this.columnlength.ExtendedProperties.Add("Generator_ChangingEventName", "lengthChanging");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "length");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "lengthColumn");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlength");
                this.columnlength.ExtendedProperties.Add("Generator_DelegateName", "lengthChangeEventHandler");
                this.columnlength.ExtendedProperties.Add("Generator_EventArgName", "lengthChangeEventArg");
                this.columnlength.ExtendedProperties.Add("User_ColumnName", "length");
                base.Columns.Add(this.columnlength);
                this.columndata = new System.Data.DataColumn("data", typeof(string), null, System.Data.MappingType.Element);
                this.columndata.ExtendedProperties.Add("Generator_ChangedEventName", "dataChanged");
                this.columndata.ExtendedProperties.Add("Generator_ChangingEventName", "dataChanging");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "data");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dataColumn");
                this.columndata.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndata");
                this.columndata.ExtendedProperties.Add("Generator_DelegateName", "dataChangeEventHandler");
                this.columndata.ExtendedProperties.Add("Generator_EventArgName", "dataChangeEventArg");
                this.columndata.ExtendedProperties.Add("User_ColumnName", "data");
                base.Columns.Add(this.columndata);
                this.Constraints.Add(new System.Data.UniqueConstraint("FilesKey1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.columnlistinglID.Caption = "voiceMailID";
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "ListingFilesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ListingFilesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ListingFilesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ListingFilesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "ListingFiles");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableListingFiles");
                this.ExtendedProperties.Add("User_TableName", "ListingFiles");
            }
            
            public ListingFilesRow NewListingFilesRow() {
                return ((ListingFilesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ListingFilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ListingFilesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListingFilesRowChanged != null)) {
                    this.ListingFilesRowChanged(this, new ListingFilesRowChangeEvent(((ListingFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListingFilesRowChanging != null)) {
                    this.ListingFilesRowChanging(this, new ListingFilesRowChangeEvent(((ListingFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListingFilesRowDeleted != null)) {
                    this.ListingFilesRowDeleted(this, new ListingFilesRowChangeEvent(((ListingFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListingFilesRowDeleting != null)) {
                    this.ListingFilesRowDeleting(this, new ListingFilesRowChangeEvent(((ListingFilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveListingFilesRow(ListingFilesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListingFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(ListingFilesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingFilesRow Row {
                    get {
                        return ((ListingFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void listinglIDChangeEventHandler(ListingFilesDataTable sender, listinglIDChangeEventArg e);
            
            public class listinglIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public listinglIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingFilesRow Row {
                    get {
                        return ((ListingFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn listinglIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void fileNameChangeEventHandler(ListingFilesDataTable sender, fileNameChangeEventArg e);
            
            public class fileNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public fileNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingFilesRow Row {
                    get {
                        return ((ListingFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn fileNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void lengthChangeEventHandler(ListingFilesDataTable sender, lengthChangeEventArg e);
            
            public class lengthChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public lengthChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingFilesRow Row {
                    get {
                        return ((ListingFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn lengthColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dataChangeEventHandler(ListingFilesDataTable sender, dataChangeEventArg e);
            
            public class dataChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dataChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingFilesRow Row {
                    get {
                        return ((ListingFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dataColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListingCallLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlistinglID;
            
            private System.Data.DataColumn columndate;
            
            private System.Data.DataColumn columnxml;
            
            private bool m_suspendValidation = false;
            
            public ListingCallLogDataTable() {
                this.TableName = "ListingCallLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ListingCallLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ListingCallLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn listinglIDColumn {
                get {
                    return this.columnlistinglID;
                }
            }
            
            internal System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ListingCallLogRow this[int index] {
                get {
                    return ((ListingCallLogRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event listinglIDChangeEventHandler listinglIDChanging;
            
            public event listinglIDChangeEventHandler listinglIDChanged;
            
            public event dateChangeEventHandler dateChanging;
            
            public event dateChangeEventHandler dateChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event ListingCallLogRowChangeEventHandler ListingCallLogRowChanged;
            
            public event ListingCallLogRowChangeEventHandler ListingCallLogRowChanging;
            
            public event ListingCallLogRowChangeEventHandler ListingCallLogRowDeleted;
            
            public event ListingCallLogRowChangeEventHandler ListingCallLogRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "listinglID")) {
                    if ((this.listinglIDChanging != null)) {
                        this.listinglIDChanging(this, new listinglIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "date")) {
                        if ((this.dateChanging != null)) {
                            this.dateChanging(this, new dateChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanging != null)) {
                                this.xmlChanging(this, new xmlChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "listinglID")) {
                    if ((this.listinglIDChanged != null)) {
                        this.listinglIDChanged(this, new listinglIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "date")) {
                        if ((this.dateChanged != null)) {
                            this.dateChanged(this, new dateChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanged != null)) {
                                this.xmlChanged(this, new xmlChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddListingCallLogRow(ListingCallLogRow row) {
                this.Rows.Add(row);
            }
            
            public ListingCallLogRow AddListingCallLogRow(ListingsRow parentListingsRowByFK_Listings_ListingCallLog, string date, string xml) {
                ListingCallLogRow rowListingCallLogRow = ((ListingCallLogRow)(this.NewRow()));
                rowListingCallLogRow.ItemArray = new object[] {
                        parentListingsRowByFK_Listings_ListingCallLog[0],
                        date,
                        xml};
                this.Rows.Add(rowListingCallLogRow);
                return rowListingCallLogRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ListingCallLogDataTable cln = ((ListingCallLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ListingCallLogDataTable();
            }
            
            internal void InitVars() {
                this.columnlistinglID = base.Columns["listinglID"];
                this.columndate = base.Columns["date"];
                this.columnxml = base.Columns["xml"];
            }
            
            private void InitClass() {
                this.columnlistinglID = new System.Data.DataColumn("listinglID", typeof(string), null, System.Data.MappingType.Element);
                this.columnlistinglID.ExtendedProperties.Add("Generator_ChangedEventName", "listinglIDChanged");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ChangingEventName", "listinglIDChanging");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "listinglID");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "listinglIDColumn");
                this.columnlistinglID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlistinglID");
                this.columnlistinglID.ExtendedProperties.Add("Generator_DelegateName", "listinglIDChangeEventHandler");
                this.columnlistinglID.ExtendedProperties.Add("Generator_EventArgName", "listinglIDChangeEventArg");
                this.columnlistinglID.ExtendedProperties.Add("User_ColumnName", "listinglID");
                base.Columns.Add(this.columnlistinglID);
                this.columndate = new System.Data.DataColumn("date", typeof(string), null, System.Data.MappingType.Element);
                this.columndate.ExtendedProperties.Add("Generator_ChangedEventName", "dateChanged");
                this.columndate.ExtendedProperties.Add("Generator_ChangingEventName", "dateChanging");
                this.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "date");
                this.columndate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dateColumn");
                this.columndate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndate");
                this.columndate.ExtendedProperties.Add("Generator_DelegateName", "dateChangeEventHandler");
                this.columndate.ExtendedProperties.Add("Generator_EventArgName", "dateChangeEventArg");
                this.columndate.ExtendedProperties.Add("User_ColumnName", "date");
                base.Columns.Add(this.columndate);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.columnlistinglID.Caption = "voiceMailID";
                this.columndate.Caption = "fileName";
                this.columnxml.Caption = "length";
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "ListingCallLogRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ListingCallLogRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ListingCallLogRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ListingCallLogDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "ListingCallLog");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableListingCallLog");
                this.ExtendedProperties.Add("User_TableName", "ListingCallLog");
            }
            
            public ListingCallLogRow NewListingCallLogRow() {
                return ((ListingCallLogRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ListingCallLogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ListingCallLogRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListingCallLogRowChanged != null)) {
                    this.ListingCallLogRowChanged(this, new ListingCallLogRowChangeEvent(((ListingCallLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListingCallLogRowChanging != null)) {
                    this.ListingCallLogRowChanging(this, new ListingCallLogRowChangeEvent(((ListingCallLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListingCallLogRowDeleted != null)) {
                    this.ListingCallLogRowDeleted(this, new ListingCallLogRowChangeEvent(((ListingCallLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListingCallLogRowDeleting != null)) {
                    this.ListingCallLogRowDeleting(this, new ListingCallLogRowChangeEvent(((ListingCallLogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveListingCallLogRow(ListingCallLogRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListingCallLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void listinglIDChangeEventHandler(ListingCallLogDataTable sender, listinglIDChangeEventArg e);
            
            public class listinglIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public listinglIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingCallLogRow Row {
                    get {
                        return ((ListingCallLogRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn listinglIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dateChangeEventHandler(ListingCallLogDataTable sender, dateChangeEventArg e);
            
            public class dateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingCallLogRow Row {
                    get {
                        return ((ListingCallLogRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(ListingCallLogDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ListingCallLogRow Row {
                    get {
                        return ((ListingCallLogRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CompanyFilesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columncompanyID;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnlength;
            
            private System.Data.DataColumn columndata;
            
            private bool m_suspendValidation = false;
            
            public CompanyFilesDataTable() {
                this.TableName = "CompanyFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CompanyFilesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CompanyFilesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn companyIDColumn {
                get {
                    return this.columncompanyID;
                }
            }
            
            internal System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            internal System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            internal System.Data.DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CompanyFilesRow this[int index] {
                get {
                    return ((CompanyFilesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event companyIDChangeEventHandler companyIDChanging;
            
            public event companyIDChangeEventHandler companyIDChanged;
            
            public event fileNameChangeEventHandler fileNameChanging;
            
            public event fileNameChangeEventHandler fileNameChanged;
            
            public event lengthChangeEventHandler lengthChanging;
            
            public event lengthChangeEventHandler lengthChanged;
            
            public event dataChangeEventHandler dataChanging;
            
            public event dataChangeEventHandler dataChanged;
            
            public event CompanyFilesRowChangeEventHandler CompanyFilesRowChanged;
            
            public event CompanyFilesRowChangeEventHandler CompanyFilesRowChanging;
            
            public event CompanyFilesRowChangeEventHandler CompanyFilesRowDeleted;
            
            public event CompanyFilesRowChangeEventHandler CompanyFilesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "companyID")) {
                        if ((this.companyIDChanging != null)) {
                            this.companyIDChanging(this, new companyIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanging != null)) {
                                this.fileNameChanging(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanging != null)) {
                                    this.lengthChanging(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanging != null)) {
                                        this.dataChanging(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "companyID")) {
                        if ((this.companyIDChanged != null)) {
                            this.companyIDChanged(this, new companyIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanged != null)) {
                                this.fileNameChanged(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanged != null)) {
                                    this.lengthChanged(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanged != null)) {
                                        this.dataChanged(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddCompanyFilesRow(CompanyFilesRow row) {
                this.Rows.Add(row);
            }
            
            public CompanyFilesRow AddCompanyFilesRow(string ID, CompaniesRow parentCompaniesRowByFK_Companies_CompanyFiles, string fileName, string length, string data) {
                CompanyFilesRow rowCompanyFilesRow = ((CompanyFilesRow)(this.NewRow()));
                rowCompanyFilesRow.ItemArray = new object[] {
                        ID,
                        parentCompaniesRowByFK_Companies_CompanyFiles[0],
                        fileName,
                        length,
                        data};
                this.Rows.Add(rowCompanyFilesRow);
                return rowCompanyFilesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CompanyFilesDataTable cln = ((CompanyFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CompanyFilesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columncompanyID = base.Columns["companyID"];
                this.columnfileName = base.Columns["fileName"];
                this.columnlength = base.Columns["length"];
                this.columndata = base.Columns["data"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columncompanyID = new System.Data.DataColumn("companyID", typeof(string), null, System.Data.MappingType.Element);
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangedEventName", "companyIDChanged");
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangingEventName", "companyIDChanging");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "companyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "companyIDColumn");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncompanyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_DelegateName", "companyIDChangeEventHandler");
                this.columncompanyID.ExtendedProperties.Add("Generator_EventArgName", "companyIDChangeEventArg");
                this.columncompanyID.ExtendedProperties.Add("User_ColumnName", "companyID");
                base.Columns.Add(this.columncompanyID);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                this.columnfileName.ExtendedProperties.Add("Generator_ChangedEventName", "fileNameChanged");
                this.columnfileName.ExtendedProperties.Add("Generator_ChangingEventName", "fileNameChanging");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "fileName");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "fileNameColumn");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnfileName");
                this.columnfileName.ExtendedProperties.Add("Generator_DelegateName", "fileNameChangeEventHandler");
                this.columnfileName.ExtendedProperties.Add("Generator_EventArgName", "fileNameChangeEventArg");
                this.columnfileName.ExtendedProperties.Add("User_ColumnName", "fileName");
                base.Columns.Add(this.columnfileName);
                this.columnlength = new System.Data.DataColumn("length", typeof(string), null, System.Data.MappingType.Element);
                this.columnlength.ExtendedProperties.Add("Generator_ChangedEventName", "lengthChanged");
                this.columnlength.ExtendedProperties.Add("Generator_ChangingEventName", "lengthChanging");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "length");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "lengthColumn");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlength");
                this.columnlength.ExtendedProperties.Add("Generator_DelegateName", "lengthChangeEventHandler");
                this.columnlength.ExtendedProperties.Add("Generator_EventArgName", "lengthChangeEventArg");
                this.columnlength.ExtendedProperties.Add("User_ColumnName", "length");
                base.Columns.Add(this.columnlength);
                this.columndata = new System.Data.DataColumn("data", typeof(string), null, System.Data.MappingType.Element);
                this.columndata.ExtendedProperties.Add("Generator_ChangedEventName", "dataChanged");
                this.columndata.ExtendedProperties.Add("Generator_ChangingEventName", "dataChanging");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "data");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dataColumn");
                this.columndata.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndata");
                this.columndata.ExtendedProperties.Add("Generator_DelegateName", "dataChangeEventHandler");
                this.columndata.ExtendedProperties.Add("Generator_EventArgName", "dataChangeEventArg");
                this.columndata.ExtendedProperties.Add("User_ColumnName", "data");
                base.Columns.Add(this.columndata);
                this.Constraints.Add(new System.Data.UniqueConstraint("FilesKey1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.columncompanyID.Caption = "voiceMailID";
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "CompanyFilesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CompanyFilesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CompanyFilesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CompanyFilesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "CompanyFiles");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCompanyFiles");
                this.ExtendedProperties.Add("User_TableName", "CompanyFiles");
            }
            
            public CompanyFilesRow NewCompanyFilesRow() {
                return ((CompanyFilesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CompanyFilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompanyFilesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyFilesRowChanged != null)) {
                    this.CompanyFilesRowChanged(this, new CompanyFilesRowChangeEvent(((CompanyFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyFilesRowChanging != null)) {
                    this.CompanyFilesRowChanging(this, new CompanyFilesRowChangeEvent(((CompanyFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyFilesRowDeleted != null)) {
                    this.CompanyFilesRowDeleted(this, new CompanyFilesRowChangeEvent(((CompanyFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyFilesRowDeleting != null)) {
                    this.CompanyFilesRowDeleting(this, new CompanyFilesRowChangeEvent(((CompanyFilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompanyFilesRow(CompanyFilesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CompanyFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(CompanyFilesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyFilesRow Row {
                    get {
                        return ((CompanyFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void companyIDChangeEventHandler(CompanyFilesDataTable sender, companyIDChangeEventArg e);
            
            public class companyIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public companyIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyFilesRow Row {
                    get {
                        return ((CompanyFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn companyIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void fileNameChangeEventHandler(CompanyFilesDataTable sender, fileNameChangeEventArg e);
            
            public class fileNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public fileNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyFilesRow Row {
                    get {
                        return ((CompanyFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn fileNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void lengthChangeEventHandler(CompanyFilesDataTable sender, lengthChangeEventArg e);
            
            public class lengthChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public lengthChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyFilesRow Row {
                    get {
                        return ((CompanyFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn lengthColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dataChangeEventHandler(CompanyFilesDataTable sender, dataChangeEventArg e);
            
            public class dataChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dataChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyFilesRow Row {
                    get {
                        return ((CompanyFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dataColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentFilesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnagentID;
            
            private System.Data.DataColumn columnfileName;
            
            private System.Data.DataColumn columnlength;
            
            private System.Data.DataColumn columndata;
            
            private bool m_suspendValidation = false;
            
            public AgentFilesDataTable() {
                this.TableName = "AgentFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AgentFilesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AgentFilesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn agentIDColumn {
                get {
                    return this.columnagentID;
                }
            }
            
            internal System.Data.DataColumn fileNameColumn {
                get {
                    return this.columnfileName;
                }
            }
            
            internal System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            internal System.Data.DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AgentFilesRow this[int index] {
                get {
                    return ((AgentFilesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event agentIDChangeEventHandler agentIDChanging;
            
            public event agentIDChangeEventHandler agentIDChanged;
            
            public event fileNameChangeEventHandler fileNameChanging;
            
            public event fileNameChangeEventHandler fileNameChanged;
            
            public event lengthChangeEventHandler lengthChanging;
            
            public event lengthChangeEventHandler lengthChanged;
            
            public event dataChangeEventHandler dataChanging;
            
            public event dataChangeEventHandler dataChanged;
            
            public event AgentFilesRowChangeEventHandler AgentFilesRowChanged;
            
            public event AgentFilesRowChangeEventHandler AgentFilesRowChanging;
            
            public event AgentFilesRowChangeEventHandler AgentFilesRowDeleted;
            
            public event AgentFilesRowChangeEventHandler AgentFilesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanging != null)) {
                            this.agentIDChanging(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanging != null)) {
                                this.fileNameChanging(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanging != null)) {
                                    this.lengthChanging(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanging != null)) {
                                        this.dataChanging(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "agentID")) {
                        if ((this.agentIDChanged != null)) {
                            this.agentIDChanged(this, new agentIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "fileName")) {
                            if ((this.fileNameChanged != null)) {
                                this.fileNameChanged(this, new fileNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "length")) {
                                if ((this.lengthChanged != null)) {
                                    this.lengthChanged(this, new lengthChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "data")) {
                                    if ((this.dataChanged != null)) {
                                        this.dataChanged(this, new dataChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddAgentFilesRow(AgentFilesRow row) {
                this.Rows.Add(row);
            }
            
            public AgentFilesRow AddAgentFilesRow(string ID, AgentsRow parentAgentsRowByFK_Agents_AgentFiles, string fileName, string length, string data) {
                AgentFilesRow rowAgentFilesRow = ((AgentFilesRow)(this.NewRow()));
                rowAgentFilesRow.ItemArray = new object[] {
                        ID,
                        parentAgentsRowByFK_Agents_AgentFiles[0],
                        fileName,
                        length,
                        data};
                this.Rows.Add(rowAgentFilesRow);
                return rowAgentFilesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AgentFilesDataTable cln = ((AgentFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AgentFilesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnagentID = base.Columns["agentID"];
                this.columnfileName = base.Columns["fileName"];
                this.columnlength = base.Columns["length"];
                this.columndata = base.Columns["data"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnagentID = new System.Data.DataColumn("agentID", typeof(string), null, System.Data.MappingType.Element);
                this.columnagentID.ExtendedProperties.Add("Generator_ChangedEventName", "agentIDChanged");
                this.columnagentID.ExtendedProperties.Add("Generator_ChangingEventName", "agentIDChanging");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "agentID");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "agentIDColumn");
                this.columnagentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnagentID");
                this.columnagentID.ExtendedProperties.Add("Generator_DelegateName", "agentIDChangeEventHandler");
                this.columnagentID.ExtendedProperties.Add("Generator_EventArgName", "agentIDChangeEventArg");
                this.columnagentID.ExtendedProperties.Add("User_ColumnName", "agentID");
                base.Columns.Add(this.columnagentID);
                this.columnfileName = new System.Data.DataColumn("fileName", typeof(string), null, System.Data.MappingType.Element);
                this.columnfileName.ExtendedProperties.Add("Generator_ChangedEventName", "fileNameChanged");
                this.columnfileName.ExtendedProperties.Add("Generator_ChangingEventName", "fileNameChanging");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "fileName");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "fileNameColumn");
                this.columnfileName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnfileName");
                this.columnfileName.ExtendedProperties.Add("Generator_DelegateName", "fileNameChangeEventHandler");
                this.columnfileName.ExtendedProperties.Add("Generator_EventArgName", "fileNameChangeEventArg");
                this.columnfileName.ExtendedProperties.Add("User_ColumnName", "fileName");
                base.Columns.Add(this.columnfileName);
                this.columnlength = new System.Data.DataColumn("length", typeof(string), null, System.Data.MappingType.Element);
                this.columnlength.ExtendedProperties.Add("Generator_ChangedEventName", "lengthChanged");
                this.columnlength.ExtendedProperties.Add("Generator_ChangingEventName", "lengthChanging");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "length");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "lengthColumn");
                this.columnlength.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnlength");
                this.columnlength.ExtendedProperties.Add("Generator_DelegateName", "lengthChangeEventHandler");
                this.columnlength.ExtendedProperties.Add("Generator_EventArgName", "lengthChangeEventArg");
                this.columnlength.ExtendedProperties.Add("User_ColumnName", "length");
                base.Columns.Add(this.columnlength);
                this.columndata = new System.Data.DataColumn("data", typeof(string), null, System.Data.MappingType.Element);
                this.columndata.ExtendedProperties.Add("Generator_ChangedEventName", "dataChanged");
                this.columndata.ExtendedProperties.Add("Generator_ChangingEventName", "dataChanging");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "data");
                this.columndata.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "dataColumn");
                this.columndata.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columndata");
                this.columndata.ExtendedProperties.Add("Generator_DelegateName", "dataChangeEventHandler");
                this.columndata.ExtendedProperties.Add("Generator_EventArgName", "dataChangeEventArg");
                this.columndata.ExtendedProperties.Add("User_ColumnName", "data");
                base.Columns.Add(this.columndata);
                this.Constraints.Add(new System.Data.UniqueConstraint("FilesKey1", new System.Data.DataColumn[] {
                                this.columnID}, false));
                this.columnID.Unique = true;
                this.columnagentID.Caption = "voiceMailID";
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "AgentFilesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "AgentFilesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "AgentFilesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "AgentFilesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "AgentFiles");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableAgentFiles");
                this.ExtendedProperties.Add("User_TableName", "AgentFiles");
            }
            
            public AgentFilesRow NewAgentFilesRow() {
                return ((AgentFilesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AgentFilesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AgentFilesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentFilesRowChanged != null)) {
                    this.AgentFilesRowChanged(this, new AgentFilesRowChangeEvent(((AgentFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentFilesRowChanging != null)) {
                    this.AgentFilesRowChanging(this, new AgentFilesRowChangeEvent(((AgentFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentFilesRowDeleted != null)) {
                    this.AgentFilesRowDeleted(this, new AgentFilesRowChangeEvent(((AgentFilesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentFilesRowDeleting != null)) {
                    this.AgentFilesRowDeleting(this, new AgentFilesRowChangeEvent(((AgentFilesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgentFilesRow(AgentFilesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(AgentFilesDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentFilesRow Row {
                    get {
                        return ((AgentFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void agentIDChangeEventHandler(AgentFilesDataTable sender, agentIDChangeEventArg e);
            
            public class agentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public agentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentFilesRow Row {
                    get {
                        return ((AgentFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn agentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void fileNameChangeEventHandler(AgentFilesDataTable sender, fileNameChangeEventArg e);
            
            public class fileNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public fileNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentFilesRow Row {
                    get {
                        return ((AgentFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn fileNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void lengthChangeEventHandler(AgentFilesDataTable sender, lengthChangeEventArg e);
            
            public class lengthChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public lengthChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentFilesRow Row {
                    get {
                        return ((AgentFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn lengthColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void dataChangeEventHandler(AgentFilesDataTable sender, dataChangeEventArg e);
            
            public class dataChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public dataChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AgentFilesRow Row {
                    get {
                        return ((AgentFilesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn dataColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CompanyPhoneLookupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncompanyID;
            
            private System.Data.DataColumn columnphone;
            
            private bool m_suspendValidation = false;
            
            public CompanyPhoneLookupDataTable() {
                this.TableName = "CompanyPhoneLookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CompanyPhoneLookupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CompanyPhoneLookupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn companyIDColumn {
                get {
                    return this.columncompanyID;
                }
            }
            
            internal System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CompanyPhoneLookupRow this[int index] {
                get {
                    return ((CompanyPhoneLookupRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event companyIDChangeEventHandler companyIDChanging;
            
            public event companyIDChangeEventHandler companyIDChanged;
            
            public event phoneChangeEventHandler phoneChanging;
            
            public event phoneChangeEventHandler phoneChanged;
            
            public event CompanyPhoneLookupRowChangeEventHandler CompanyPhoneLookupRowChanged;
            
            public event CompanyPhoneLookupRowChangeEventHandler CompanyPhoneLookupRowChanging;
            
            public event CompanyPhoneLookupRowChangeEventHandler CompanyPhoneLookupRowDeleted;
            
            public event CompanyPhoneLookupRowChangeEventHandler CompanyPhoneLookupRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "companyID")) {
                    if ((this.companyIDChanging != null)) {
                        this.companyIDChanging(this, new companyIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "phone")) {
                        if ((this.phoneChanging != null)) {
                            this.phoneChanging(this, new phoneChangeEventArg(e));
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "companyID")) {
                    if ((this.companyIDChanged != null)) {
                        this.companyIDChanged(this, new companyIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "phone")) {
                        if ((this.phoneChanged != null)) {
                            this.phoneChanged(this, new phoneChangeEventArg(e));
                        }
                    }
                }
            }
            
            public void AddCompanyPhoneLookupRow(CompanyPhoneLookupRow row) {
                this.Rows.Add(row);
            }
            
            public CompanyPhoneLookupRow AddCompanyPhoneLookupRow(CompaniesRow parentCompaniesRowByFK_Companies_CompanyPhoneLookup, string phone) {
                CompanyPhoneLookupRow rowCompanyPhoneLookupRow = ((CompanyPhoneLookupRow)(this.NewRow()));
                rowCompanyPhoneLookupRow.ItemArray = new object[] {
                        parentCompaniesRowByFK_Companies_CompanyPhoneLookup[0],
                        phone};
                this.Rows.Add(rowCompanyPhoneLookupRow);
                return rowCompanyPhoneLookupRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CompanyPhoneLookupDataTable cln = ((CompanyPhoneLookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CompanyPhoneLookupDataTable();
            }
            
            internal void InitVars() {
                this.columncompanyID = base.Columns["companyID"];
                this.columnphone = base.Columns["phone"];
            }
            
            private void InitClass() {
                this.columncompanyID = new System.Data.DataColumn("companyID", typeof(string), null, System.Data.MappingType.Element);
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangedEventName", "companyIDChanged");
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangingEventName", "companyIDChanging");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "companyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "companyIDColumn");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncompanyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_DelegateName", "companyIDChangeEventHandler");
                this.columncompanyID.ExtendedProperties.Add("Generator_EventArgName", "companyIDChangeEventArg");
                this.columncompanyID.ExtendedProperties.Add("User_ColumnName", "companyID");
                base.Columns.Add(this.columncompanyID);
                this.columnphone = new System.Data.DataColumn("phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnphone.ExtendedProperties.Add("Generator_ChangedEventName", "phoneChanged");
                this.columnphone.ExtendedProperties.Add("Generator_ChangingEventName", "phoneChanging");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "phone");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "phoneColumn");
                this.columnphone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnphone");
                this.columnphone.ExtendedProperties.Add("Generator_DelegateName", "phoneChangeEventHandler");
                this.columnphone.ExtendedProperties.Add("Generator_EventArgName", "phoneChangeEventArg");
                this.columnphone.ExtendedProperties.Add("User_ColumnName", "phone");
                base.Columns.Add(this.columnphone);
                this.ExtendedProperties.Add("Generator_RowClassName", "CompanyPhoneLookupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CompanyPhoneLookupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CompanyPhoneLookupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CompanyPhoneLookupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "CompanyPhoneLookup");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCompanyPhoneLookup");
                this.ExtendedProperties.Add("User_TableName", "CompanyPhoneLookup");
            }
            
            public CompanyPhoneLookupRow NewCompanyPhoneLookupRow() {
                return ((CompanyPhoneLookupRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CompanyPhoneLookupRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompanyPhoneLookupRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyPhoneLookupRowChanged != null)) {
                    this.CompanyPhoneLookupRowChanged(this, new CompanyPhoneLookupRowChangeEvent(((CompanyPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyPhoneLookupRowChanging != null)) {
                    this.CompanyPhoneLookupRowChanging(this, new CompanyPhoneLookupRowChangeEvent(((CompanyPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyPhoneLookupRowDeleted != null)) {
                    this.CompanyPhoneLookupRowDeleted(this, new CompanyPhoneLookupRowChangeEvent(((CompanyPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyPhoneLookupRowDeleting != null)) {
                    this.CompanyPhoneLookupRowDeleting(this, new CompanyPhoneLookupRowChangeEvent(((CompanyPhoneLookupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompanyPhoneLookupRow(CompanyPhoneLookupRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CompanyPhoneLookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void companyIDChangeEventHandler(CompanyPhoneLookupDataTable sender, companyIDChangeEventArg e);
            
            public class companyIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public companyIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyPhoneLookupRow Row {
                    get {
                        return ((CompanyPhoneLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn companyIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void phoneChangeEventHandler(CompanyPhoneLookupDataTable sender, phoneChangeEventArg e);
            
            public class phoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public phoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CompanyPhoneLookupRow Row {
                    get {
                        return ((CompanyPhoneLookupRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn phoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnemail;
            
            private System.Data.DataColumn columnxml;
            
            private System.Data.DataColumn columnpassword;
            
            private System.Data.DataColumn columncompanyID;
            
            private System.Data.DataColumn columncustomerNumber;
            
            private bool m_suspendValidation = false;
            
            public CustomersDataTable() {
                this.TableName = "Customers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CustomersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CustomersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            internal System.Data.DataColumn xmlColumn {
                get {
                    return this.columnxml;
                }
            }
            
            internal System.Data.DataColumn passwordColumn {
                get {
                    return this.columnpassword;
                }
            }
            
            internal System.Data.DataColumn companyIDColumn {
                get {
                    return this.columncompanyID;
                }
            }
            
            internal System.Data.DataColumn customerNumberColumn {
                get {
                    return this.columncustomerNumber;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CustomersRow this[int index] {
                get {
                    return ((CustomersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IDChangeEventHandler IDChanging;
            
            public event IDChangeEventHandler IDChanged;
            
            public event emailChangeEventHandler emailChanging;
            
            public event emailChangeEventHandler emailChanged;
            
            public event xmlChangeEventHandler xmlChanging;
            
            public event xmlChangeEventHandler xmlChanged;
            
            public event passwordChangeEventHandler passwordChanging;
            
            public event passwordChangeEventHandler passwordChanged;
            
            public event companyIDChangeEventHandler companyIDChanging;
            
            public event companyIDChangeEventHandler companyIDChanged;
            
            public event customerNumberChangeEventHandler customerNumberChanging;
            
            public event customerNumberChangeEventHandler customerNumberChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanging;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleted;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanging != null)) {
                        this.IDChanging(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "email")) {
                        if ((this.emailChanging != null)) {
                            this.emailChanging(this, new emailChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanging != null)) {
                                this.xmlChanging(this, new xmlChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "password")) {
                                if ((this.passwordChanging != null)) {
                                    this.passwordChanging(this, new passwordChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "companyID")) {
                                    if ((this.companyIDChanging != null)) {
                                        this.companyIDChanging(this, new companyIDChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "customerNumber")) {
                                        if ((this.customerNumberChanging != null)) {
                                            this.customerNumberChanging(this, new customerNumberChangeEventArg(e));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ID")) {
                    if ((this.IDChanged != null)) {
                        this.IDChanged(this, new IDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "email")) {
                        if ((this.emailChanged != null)) {
                            this.emailChanged(this, new emailChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "xml")) {
                            if ((this.xmlChanged != null)) {
                                this.xmlChanged(this, new xmlChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "password")) {
                                if ((this.passwordChanged != null)) {
                                    this.passwordChanged(this, new passwordChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "companyID")) {
                                    if ((this.companyIDChanged != null)) {
                                        this.companyIDChanged(this, new companyIDChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "customerNumber")) {
                                        if ((this.customerNumberChanged != null)) {
                                            this.customerNumberChanged(this, new customerNumberChangeEventArg(e));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddCustomersRow(CustomersRow row) {
                this.Rows.Add(row);
            }
            
            public CustomersRow AddCustomersRow(string ID, string email, string xml, string password, CompaniesRow parentCompaniesRowByFK_Companies_Customers, string customerNumber) {
                CustomersRow rowCustomersRow = ((CustomersRow)(this.NewRow()));
                rowCustomersRow.ItemArray = new object[] {
                        ID,
                        email,
                        xml,
                        password,
                        parentCompaniesRowByFK_Companies_Customers[0],
                        customerNumber};
                this.Rows.Add(rowCustomersRow);
                return rowCustomersRow;
            }
            
            public CustomersRow FindByID(string ID) {
                return ((CustomersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CustomersDataTable cln = ((CustomersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CustomersDataTable();
            }
            
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnemail = base.Columns["email"];
                this.columnxml = base.Columns["xml"];
                this.columnpassword = base.Columns["password"];
                this.columncompanyID = base.Columns["companyID"];
                this.columncustomerNumber = base.Columns["customerNumber"];
            }
            
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.columnID.ExtendedProperties.Add("Generator_ChangedEventName", "IDChanged");
                this.columnID.ExtendedProperties.Add("Generator_ChangingEventName", "IDChanging");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ID");
                this.columnID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IDColumn");
                this.columnID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnID");
                this.columnID.ExtendedProperties.Add("Generator_DelegateName", "IDChangeEventHandler");
                this.columnID.ExtendedProperties.Add("Generator_EventArgName", "IDChangeEventArg");
                this.columnID.ExtendedProperties.Add("User_ColumnName", "ID");
                base.Columns.Add(this.columnID);
                this.columnemail = new System.Data.DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                this.columnemail.ExtendedProperties.Add("Generator_ChangedEventName", "emailChanged");
                this.columnemail.ExtendedProperties.Add("Generator_ChangingEventName", "emailChanging");
                this.columnemail.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "email");
                this.columnemail.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "emailColumn");
                this.columnemail.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnemail");
                this.columnemail.ExtendedProperties.Add("Generator_DelegateName", "emailChangeEventHandler");
                this.columnemail.ExtendedProperties.Add("Generator_EventArgName", "emailChangeEventArg");
                this.columnemail.ExtendedProperties.Add("User_ColumnName", "email");
                base.Columns.Add(this.columnemail);
                this.columnxml = new System.Data.DataColumn("xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnxml.ExtendedProperties.Add("Generator_ChangedEventName", "xmlChanged");
                this.columnxml.ExtendedProperties.Add("Generator_ChangingEventName", "xmlChanging");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "xml");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "xmlColumn");
                this.columnxml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnxml");
                this.columnxml.ExtendedProperties.Add("Generator_DelegateName", "xmlChangeEventHandler");
                this.columnxml.ExtendedProperties.Add("Generator_EventArgName", "xmlChangeEventArg");
                this.columnxml.ExtendedProperties.Add("User_ColumnName", "xml");
                base.Columns.Add(this.columnxml);
                this.columnpassword = new System.Data.DataColumn("password", typeof(string), null, System.Data.MappingType.Element);
                this.columnpassword.ExtendedProperties.Add("Generator_ChangedEventName", "passwordChanged");
                this.columnpassword.ExtendedProperties.Add("Generator_ChangingEventName", "passwordChanging");
                this.columnpassword.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "password");
                this.columnpassword.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "passwordColumn");
                this.columnpassword.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnpassword");
                this.columnpassword.ExtendedProperties.Add("Generator_DelegateName", "passwordChangeEventHandler");
                this.columnpassword.ExtendedProperties.Add("Generator_EventArgName", "passwordChangeEventArg");
                this.columnpassword.ExtendedProperties.Add("User_ColumnName", "password");
                base.Columns.Add(this.columnpassword);
                this.columncompanyID = new System.Data.DataColumn("companyID", typeof(string), null, System.Data.MappingType.Element);
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangedEventName", "companyIDChanged");
                this.columncompanyID.ExtendedProperties.Add("Generator_ChangingEventName", "companyIDChanging");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "companyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "companyIDColumn");
                this.columncompanyID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncompanyID");
                this.columncompanyID.ExtendedProperties.Add("Generator_DelegateName", "companyIDChangeEventHandler");
                this.columncompanyID.ExtendedProperties.Add("Generator_EventArgName", "companyIDChangeEventArg");
                this.columncompanyID.ExtendedProperties.Add("User_ColumnName", "companyID");
                base.Columns.Add(this.columncompanyID);
                this.columncustomerNumber = new System.Data.DataColumn("customerNumber", typeof(string), null, System.Data.MappingType.Element);
                this.columncustomerNumber.ExtendedProperties.Add("Generator_ChangedEventName", "customerNumberChanged");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_ChangingEventName", "customerNumberChanging");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "customerNumber");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "customerNumberColumn");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncustomerNumber");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_DelegateName", "customerNumberChangeEventHandler");
                this.columncustomerNumber.ExtendedProperties.Add("Generator_EventArgName", "customerNumberChangeEventArg");
                this.columncustomerNumber.ExtendedProperties.Add("User_ColumnName", "customerNumber");
                base.Columns.Add(this.columncustomerNumber);
                this.Constraints.Add(new System.Data.UniqueConstraint("Key", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnemail.Caption = "name";
                this.columncustomerNumber.Caption = "companyID";
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "CustomersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CustomersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CustomersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CustomersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Customers");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCustomers");
                this.ExtendedProperties.Add("User_TableName", "Customers");
            }
            
            public CustomersRow NewCustomersRow() {
                return ((CustomersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomersRowChanged != null)) {
                    this.CustomersRowChanged(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomersRowChanging != null)) {
                    this.CustomersRowChanging(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomersRowDeleted != null)) {
                    this.CustomersRowDeleted(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomersRowDeleting != null)) {
                    this.CustomersRowDeleting(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCustomersRow(CustomersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IDChangeEventHandler(CustomersDataTable sender, IDChangeEventArg e);
            
            public class IDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void emailChangeEventHandler(CustomersDataTable sender, emailChangeEventArg e);
            
            public class emailChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public emailChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn emailColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void xmlChangeEventHandler(CustomersDataTable sender, xmlChangeEventArg e);
            
            public class xmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public xmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn xmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void passwordChangeEventHandler(CustomersDataTable sender, passwordChangeEventArg e);
            
            public class passwordChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public passwordChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn passwordColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void companyIDChangeEventHandler(CustomersDataTable sender, companyIDChangeEventArg e);
            
            public class companyIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public companyIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn companyIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void customerNumberChangeEventHandler(CustomersDataTable sender, customerNumberChangeEventArg e);
            
            public class customerNumberChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public customerNumberChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn customerNumberColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        public class CompaniesRow : System.Data.DataRow {
            
            private CompaniesDataTable tableCompanies;
            
            internal CompaniesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanies = ((CompaniesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableCompanies.IDColumn]));
                }
                set {
                    this[this.tableCompanies.IDColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableCompanies.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanies.nameColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableCompanies.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanies.xmlColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableCompanies.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableCompanies.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableCompanies.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableCompanies.xmlColumn] = System.Convert.DBNull;
            }
            
            public CustomersRow[] GetCustomersRows() {
                return ((CustomersRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Companies_Customers"])));
            }
            
            public CompanyPhoneLookupRow[] GetCompanyPhoneLookupRows() {
                return ((CompanyPhoneLookupRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Companies_CompanyPhoneLookup"])));
            }
            
            public CompanyFilesRow[] GetCompanyFilesRows() {
                return ((CompanyFilesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Companies_CompanyFiles"])));
            }
        }
        
        public class ZonesRow : System.Data.DataRow {
            
            private ZonesDataTable tableZones;
            
            internal ZonesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZones = ((ZonesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableZones.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableZones.IDColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableZones.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableZones.xmlColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableZones.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableZones.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableZones.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableZones.xmlColumn] = System.Convert.DBNull;
            }
            
            public ListingLookupRow[] GetListingLookupRows() {
                return ((ListingLookupRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Zones_ListingLookup"])));
            }
        }
        
        public class AgentsRow : System.Data.DataRow {
            
            private AgentsDataTable tableAgents;
            
            internal AgentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgents = ((AgentsDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableAgents.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgents.IDColumn] = value;
                }
            }
            
            public string customerID {
                get {
                    try {
                        return ((string)(this[this.tableAgents.customerIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgents.customerIDColumn] = value;
                }
            }
            
            public string pinCode {
                get {
                    try {
                        return ((string)(this[this.tableAgents.pinCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgents.pinCodeColumn] = value;
                }
            }
            
            public string expirationDate {
                get {
                    try {
                        return ((string)(this[this.tableAgents.expirationDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgents.expirationDateColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableAgents.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgents.xmlColumn] = value;
                }
            }
            
            public CustomersRow CustomersRow {
                get {
                    return ((CustomersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Customers_Agents"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Customers_Agents"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableAgents.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableAgents.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IscustomerIDNull() {
                return this.IsNull(this.tableAgents.customerIDColumn);
            }
            
            public void SetcustomerIDNull() {
                this[this.tableAgents.customerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspinCodeNull() {
                return this.IsNull(this.tableAgents.pinCodeColumn);
            }
            
            public void SetpinCodeNull() {
                this[this.tableAgents.pinCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsexpirationDateNull() {
                return this.IsNull(this.tableAgents.expirationDateColumn);
            }
            
            public void SetexpirationDateNull() {
                this[this.tableAgents.expirationDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableAgents.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableAgents.xmlColumn] = System.Convert.DBNull;
            }
            
            public AgentFilesRow[] GetAgentFilesRows() {
                return ((AgentFilesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Agents_AgentFiles"])));
            }
            
            public AgentPrefixLookupRow[] GetAgentPrefixLookupRows() {
                return ((AgentPrefixLookupRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Agents_AgentPrefixLookup"])));
            }
            
            public AgentPhoneLookupRow[] GetAgentPhoneLookupRows() {
                return ((AgentPhoneLookupRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Agents_AgentPhoneLookup"])));
            }
            
            public VoiceMailRow[] GetVoiceMailRows() {
                return ((VoiceMailRow[])(this.GetChildRows(this.Table.ChildRelations["FK_RealEstateAgents_VoiceMail"])));
            }
            
            public ListingsRow[] GetListingsRows() {
                return ((ListingsRow[])(this.GetChildRows(this.Table.ChildRelations["FK_RealEstateAgents_RealEstateListings"])));
            }
        }
        
        public class ListingsRow : System.Data.DataRow {
            
            private ListingsDataTable tableListings;
            
            internal ListingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListings = ((ListingsDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableListings.IDColumn]));
                }
                set {
                    this[this.tableListings.IDColumn] = value;
                }
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableListings.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListings.agentIDColumn] = value;
                }
            }
            
            public string expirationDate {
                get {
                    try {
                        return ((string)(this[this.tableListings.expirationDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListings.expirationDateColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableListings.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListings.xmlColumn] = value;
                }
            }
            
            public AgentsRow AgentsRow {
                get {
                    return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_RealEstateAgents_RealEstateListings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_RealEstateAgents_RealEstateListings"]);
                }
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableListings.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableListings.agentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsexpirationDateNull() {
                return this.IsNull(this.tableListings.expirationDateColumn);
            }
            
            public void SetexpirationDateNull() {
                this[this.tableListings.expirationDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableListings.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableListings.xmlColumn] = System.Convert.DBNull;
            }
            
            public ListingCallLogRow[] GetListingCallLogRows() {
                return ((ListingCallLogRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Listings_ListingCallLog"])));
            }
            
            public ListingFilesRow[] GetListingFilesRows() {
                return ((ListingFilesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Listings_ListingFiles"])));
            }
            
            public ListingLookupRow[] GetListingLookupRows() {
                return ((ListingLookupRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Listings_ListingLookup"])));
            }
        }
        
        public class VoiceMailRow : System.Data.DataRow {
            
            private VoiceMailDataTable tableVoiceMail;
            
            internal VoiceMailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVoiceMail = ((VoiceMailDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMail.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMail.IDColumn] = value;
                }
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMail.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMail.agentIDColumn] = value;
                }
            }
            
            public string date {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMail.dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMail.dateColumn] = value;
                }
            }
            
            public string status {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMail.statusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMail.statusColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMail.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMail.xmlColumn] = value;
                }
            }
            
            public AgentsRow RealEstateAgentsRow {
                get {
                    return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_RealEstateAgents_VoiceMail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_RealEstateAgents_VoiceMail"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableVoiceMail.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableVoiceMail.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableVoiceMail.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableVoiceMail.agentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsdateNull() {
                return this.IsNull(this.tableVoiceMail.dateColumn);
            }
            
            public void SetdateNull() {
                this[this.tableVoiceMail.dateColumn] = System.Convert.DBNull;
            }
            
            public bool IsstatusNull() {
                return this.IsNull(this.tableVoiceMail.statusColumn);
            }
            
            public void SetstatusNull() {
                this[this.tableVoiceMail.statusColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableVoiceMail.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableVoiceMail.xmlColumn] = System.Convert.DBNull;
            }
            
            public VoiceMailFilesRow[] GetVoiceMailFilesRows() {
                return ((VoiceMailFilesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_VoiceMail_VoiceMailFiles"])));
            }
        }
        
        public class AgentPhoneLookupRow : System.Data.DataRow {
            
            private AgentPhoneLookupDataTable tableAgentPhoneLookup;
            
            internal AgentPhoneLookupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentPhoneLookup = ((AgentPhoneLookupDataTable)(this.Table));
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableAgentPhoneLookup.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentPhoneLookup.agentIDColumn] = value;
                }
            }
            
            public string phone {
                get {
                    return ((string)(this[this.tableAgentPhoneLookup.phoneColumn]));
                }
                set {
                    this[this.tableAgentPhoneLookup.phoneColumn] = value;
                }
            }
            
            public AgentsRow AgentsRow {
                get {
                    return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Agents_AgentPhoneLookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Agents_AgentPhoneLookup"]);
                }
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableAgentPhoneLookup.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableAgentPhoneLookup.agentIDColumn] = System.Convert.DBNull;
            }
        }
        
        public class VoiceMailFilesRow : System.Data.DataRow {
            
            private VoiceMailFilesDataTable tableVoiceMailFiles;
            
            internal VoiceMailFilesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVoiceMailFiles = ((VoiceMailFilesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMailFiles.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMailFiles.IDColumn] = value;
                }
            }
            
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMailFiles.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMailFiles.fileNameColumn] = value;
                }
            }
            
            public string length {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMailFiles.lengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMailFiles.lengthColumn] = value;
                }
            }
            
            public string data {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMailFiles.dataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMailFiles.dataColumn] = value;
                }
            }
            
            public string voiceMailID {
                get {
                    try {
                        return ((string)(this[this.tableVoiceMailFiles.voiceMailIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableVoiceMailFiles.voiceMailIDColumn] = value;
                }
            }
            
            public VoiceMailRow VoiceMailRow {
                get {
                    return ((VoiceMailRow)(this.GetParentRow(this.Table.ParentRelations["FK_VoiceMail_VoiceMailFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_VoiceMail_VoiceMailFiles"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableVoiceMailFiles.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableVoiceMailFiles.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsfileNameNull() {
                return this.IsNull(this.tableVoiceMailFiles.fileNameColumn);
            }
            
            public void SetfileNameNull() {
                this[this.tableVoiceMailFiles.fileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IslengthNull() {
                return this.IsNull(this.tableVoiceMailFiles.lengthColumn);
            }
            
            public void SetlengthNull() {
                this[this.tableVoiceMailFiles.lengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsdataNull() {
                return this.IsNull(this.tableVoiceMailFiles.dataColumn);
            }
            
            public void SetdataNull() {
                this[this.tableVoiceMailFiles.dataColumn] = System.Convert.DBNull;
            }
            
            public bool IsvoiceMailIDNull() {
                return this.IsNull(this.tableVoiceMailFiles.voiceMailIDColumn);
            }
            
            public void SetvoiceMailIDNull() {
                this[this.tableVoiceMailFiles.voiceMailIDColumn] = System.Convert.DBNull;
            }
        }
        
        public class AgentPrefixLookupRow : System.Data.DataRow {
            
            private AgentPrefixLookupDataTable tableAgentPrefixLookup;
            
            internal AgentPrefixLookupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentPrefixLookup = ((AgentPrefixLookupDataTable)(this.Table));
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableAgentPrefixLookup.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentPrefixLookup.agentIDColumn] = value;
                }
            }
            
            public string zoneID {
                get {
                    try {
                        return ((string)(this[this.tableAgentPrefixLookup.zoneIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentPrefixLookup.zoneIDColumn] = value;
                }
            }
            
            public string agentPrefix {
                get {
                    try {
                        return ((string)(this[this.tableAgentPrefixLookup.agentPrefixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentPrefixLookup.agentPrefixColumn] = value;
                }
            }
            
            public AgentsRow AgentsRow {
                get {
                    return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Agents_AgentPrefixLookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Agents_AgentPrefixLookup"]);
                }
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableAgentPrefixLookup.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableAgentPrefixLookup.agentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IszoneIDNull() {
                return this.IsNull(this.tableAgentPrefixLookup.zoneIDColumn);
            }
            
            public void SetzoneIDNull() {
                this[this.tableAgentPrefixLookup.zoneIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsagentPrefixNull() {
                return this.IsNull(this.tableAgentPrefixLookup.agentPrefixColumn);
            }
            
            public void SetagentPrefixNull() {
                this[this.tableAgentPrefixLookup.agentPrefixColumn] = System.Convert.DBNull;
            }
        }
        
        public class ListingLookupRow : System.Data.DataRow {
            
            private ListingLookupDataTable tableListingLookup;
            
            internal ListingLookupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListingLookup = ((ListingLookupDataTable)(this.Table));
            }
            
            public string listingID {
                get {
                    try {
                        return ((string)(this[this.tableListingLookup.listingIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingLookup.listingIDColumn] = value;
                }
            }
            
            public string zoneID {
                get {
                    try {
                        return ((string)(this[this.tableListingLookup.zoneIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingLookup.zoneIDColumn] = value;
                }
            }
            
            public string pinCode {
                get {
                    try {
                        return ((string)(this[this.tableListingLookup.pinCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingLookup.pinCodeColumn] = value;
                }
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableListingLookup.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingLookup.agentIDColumn] = value;
                }
            }
            
            public ZonesRow ZonesRow {
                get {
                    return ((ZonesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Zones_ListingLookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Zones_ListingLookup"]);
                }
            }
            
            public ListingsRow ListingsRow {
                get {
                    return ((ListingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Listings_ListingLookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Listings_ListingLookup"]);
                }
            }
            
            public bool IslistingIDNull() {
                return this.IsNull(this.tableListingLookup.listingIDColumn);
            }
            
            public void SetlistingIDNull() {
                this[this.tableListingLookup.listingIDColumn] = System.Convert.DBNull;
            }
            
            public bool IszoneIDNull() {
                return this.IsNull(this.tableListingLookup.zoneIDColumn);
            }
            
            public void SetzoneIDNull() {
                this[this.tableListingLookup.zoneIDColumn] = System.Convert.DBNull;
            }
            
            public bool IspinCodeNull() {
                return this.IsNull(this.tableListingLookup.pinCodeColumn);
            }
            
            public void SetpinCodeNull() {
                this[this.tableListingLookup.pinCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableListingLookup.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableListingLookup.agentIDColumn] = System.Convert.DBNull;
            }
        }
        
        public class ListingFilesRow : System.Data.DataRow {
            
            private ListingFilesDataTable tableListingFiles;
            
            internal ListingFilesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListingFiles = ((ListingFilesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableListingFiles.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingFiles.IDColumn] = value;
                }
            }
            
            public string listinglID {
                get {
                    try {
                        return ((string)(this[this.tableListingFiles.listinglIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingFiles.listinglIDColumn] = value;
                }
            }
            
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableListingFiles.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingFiles.fileNameColumn] = value;
                }
            }
            
            public string length {
                get {
                    try {
                        return ((string)(this[this.tableListingFiles.lengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingFiles.lengthColumn] = value;
                }
            }
            
            public string data {
                get {
                    try {
                        return ((string)(this[this.tableListingFiles.dataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingFiles.dataColumn] = value;
                }
            }
            
            public ListingsRow ListingsRow {
                get {
                    return ((ListingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Listings_ListingFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Listings_ListingFiles"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableListingFiles.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableListingFiles.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IslistinglIDNull() {
                return this.IsNull(this.tableListingFiles.listinglIDColumn);
            }
            
            public void SetlistinglIDNull() {
                this[this.tableListingFiles.listinglIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsfileNameNull() {
                return this.IsNull(this.tableListingFiles.fileNameColumn);
            }
            
            public void SetfileNameNull() {
                this[this.tableListingFiles.fileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IslengthNull() {
                return this.IsNull(this.tableListingFiles.lengthColumn);
            }
            
            public void SetlengthNull() {
                this[this.tableListingFiles.lengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsdataNull() {
                return this.IsNull(this.tableListingFiles.dataColumn);
            }
            
            public void SetdataNull() {
                this[this.tableListingFiles.dataColumn] = System.Convert.DBNull;
            }
        }
        
        public class ListingCallLogRow : System.Data.DataRow {
            
            private ListingCallLogDataTable tableListingCallLog;
            
            internal ListingCallLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListingCallLog = ((ListingCallLogDataTable)(this.Table));
            }
            
            public string listinglID {
                get {
                    try {
                        return ((string)(this[this.tableListingCallLog.listinglIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingCallLog.listinglIDColumn] = value;
                }
            }
            
            public string date {
                get {
                    try {
                        return ((string)(this[this.tableListingCallLog.dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingCallLog.dateColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableListingCallLog.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableListingCallLog.xmlColumn] = value;
                }
            }
            
            public ListingsRow ListingsRow {
                get {
                    return ((ListingsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Listings_ListingCallLog"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Listings_ListingCallLog"]);
                }
            }
            
            public bool IslistinglIDNull() {
                return this.IsNull(this.tableListingCallLog.listinglIDColumn);
            }
            
            public void SetlistinglIDNull() {
                this[this.tableListingCallLog.listinglIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsdateNull() {
                return this.IsNull(this.tableListingCallLog.dateColumn);
            }
            
            public void SetdateNull() {
                this[this.tableListingCallLog.dateColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableListingCallLog.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableListingCallLog.xmlColumn] = System.Convert.DBNull;
            }
        }
        
        public class CompanyFilesRow : System.Data.DataRow {
            
            private CompanyFilesDataTable tableCompanyFiles;
            
            internal CompanyFilesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanyFiles = ((CompanyFilesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyFiles.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyFiles.IDColumn] = value;
                }
            }
            
            public string companyID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyFiles.companyIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyFiles.companyIDColumn] = value;
                }
            }
            
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableCompanyFiles.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyFiles.fileNameColumn] = value;
                }
            }
            
            public string length {
                get {
                    try {
                        return ((string)(this[this.tableCompanyFiles.lengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyFiles.lengthColumn] = value;
                }
            }
            
            public string data {
                get {
                    try {
                        return ((string)(this[this.tableCompanyFiles.dataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyFiles.dataColumn] = value;
                }
            }
            
            public CompaniesRow CompaniesRow {
                get {
                    return ((CompaniesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Companies_CompanyFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Companies_CompanyFiles"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableCompanyFiles.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableCompanyFiles.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IscompanyIDNull() {
                return this.IsNull(this.tableCompanyFiles.companyIDColumn);
            }
            
            public void SetcompanyIDNull() {
                this[this.tableCompanyFiles.companyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsfileNameNull() {
                return this.IsNull(this.tableCompanyFiles.fileNameColumn);
            }
            
            public void SetfileNameNull() {
                this[this.tableCompanyFiles.fileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IslengthNull() {
                return this.IsNull(this.tableCompanyFiles.lengthColumn);
            }
            
            public void SetlengthNull() {
                this[this.tableCompanyFiles.lengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsdataNull() {
                return this.IsNull(this.tableCompanyFiles.dataColumn);
            }
            
            public void SetdataNull() {
                this[this.tableCompanyFiles.dataColumn] = System.Convert.DBNull;
            }
        }
        
        public class AgentFilesRow : System.Data.DataRow {
            
            private AgentFilesDataTable tableAgentFiles;
            
            internal AgentFilesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentFiles = ((AgentFilesDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableAgentFiles.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentFiles.IDColumn] = value;
                }
            }
            
            public string agentID {
                get {
                    try {
                        return ((string)(this[this.tableAgentFiles.agentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentFiles.agentIDColumn] = value;
                }
            }
            
            public string fileName {
                get {
                    try {
                        return ((string)(this[this.tableAgentFiles.fileNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentFiles.fileNameColumn] = value;
                }
            }
            
            public string length {
                get {
                    try {
                        return ((string)(this[this.tableAgentFiles.lengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentFiles.lengthColumn] = value;
                }
            }
            
            public string data {
                get {
                    try {
                        return ((string)(this[this.tableAgentFiles.dataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAgentFiles.dataColumn] = value;
                }
            }
            
            public AgentsRow AgentsRow {
                get {
                    return ((AgentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Agents_AgentFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Agents_AgentFiles"]);
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableAgentFiles.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableAgentFiles.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsagentIDNull() {
                return this.IsNull(this.tableAgentFiles.agentIDColumn);
            }
            
            public void SetagentIDNull() {
                this[this.tableAgentFiles.agentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsfileNameNull() {
                return this.IsNull(this.tableAgentFiles.fileNameColumn);
            }
            
            public void SetfileNameNull() {
                this[this.tableAgentFiles.fileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IslengthNull() {
                return this.IsNull(this.tableAgentFiles.lengthColumn);
            }
            
            public void SetlengthNull() {
                this[this.tableAgentFiles.lengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsdataNull() {
                return this.IsNull(this.tableAgentFiles.dataColumn);
            }
            
            public void SetdataNull() {
                this[this.tableAgentFiles.dataColumn] = System.Convert.DBNull;
            }
        }
        
        public class CompanyPhoneLookupRow : System.Data.DataRow {
            
            private CompanyPhoneLookupDataTable tableCompanyPhoneLookup;
            
            internal CompanyPhoneLookupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompanyPhoneLookup = ((CompanyPhoneLookupDataTable)(this.Table));
            }
            
            public string companyID {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPhoneLookup.companyIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyPhoneLookup.companyIDColumn] = value;
                }
            }
            
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tableCompanyPhoneLookup.phoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCompanyPhoneLookup.phoneColumn] = value;
                }
            }
            
            public CompaniesRow CompaniesRow {
                get {
                    return ((CompaniesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Companies_CompanyPhoneLookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Companies_CompanyPhoneLookup"]);
                }
            }
            
            public bool IscompanyIDNull() {
                return this.IsNull(this.tableCompanyPhoneLookup.companyIDColumn);
            }
            
            public void SetcompanyIDNull() {
                this[this.tableCompanyPhoneLookup.companyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsphoneNull() {
                return this.IsNull(this.tableCompanyPhoneLookup.phoneColumn);
            }
            
            public void SetphoneNull() {
                this[this.tableCompanyPhoneLookup.phoneColumn] = System.Convert.DBNull;
            }
        }
        
        public class CustomersRow : System.Data.DataRow {
            
            private CustomersDataTable tableCustomers;
            
            internal CustomersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomers = ((CustomersDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableCustomers.IDColumn]));
                }
                set {
                    this[this.tableCustomers.IDColumn] = value;
                }
            }
            
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.emailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.emailColumn] = value;
                }
            }
            
            public string xml {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.xmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.xmlColumn] = value;
                }
            }
            
            public string password {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.passwordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.passwordColumn] = value;
                }
            }
            
            public string companyID {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.companyIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.companyIDColumn] = value;
                }
            }
            
            public string customerNumber {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.customerNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.customerNumberColumn] = value;
                }
            }
            
            public CompaniesRow CompaniesRow {
                get {
                    return ((CompaniesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Companies_Customers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Companies_Customers"]);
                }
            }
            
            public bool IsemailNull() {
                return this.IsNull(this.tableCustomers.emailColumn);
            }
            
            public void SetemailNull() {
                this[this.tableCustomers.emailColumn] = System.Convert.DBNull;
            }
            
            public bool IsxmlNull() {
                return this.IsNull(this.tableCustomers.xmlColumn);
            }
            
            public void SetxmlNull() {
                this[this.tableCustomers.xmlColumn] = System.Convert.DBNull;
            }
            
            public bool IspasswordNull() {
                return this.IsNull(this.tableCustomers.passwordColumn);
            }
            
            public void SetpasswordNull() {
                this[this.tableCustomers.passwordColumn] = System.Convert.DBNull;
            }
            
            public bool IscompanyIDNull() {
                return this.IsNull(this.tableCustomers.companyIDColumn);
            }
            
            public void SetcompanyIDNull() {
                this[this.tableCustomers.companyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IscustomerNumberNull() {
                return this.IsNull(this.tableCustomers.customerNumberColumn);
            }
            
            public void SetcustomerNumberNull() {
                this[this.tableCustomers.customerNumberColumn] = System.Convert.DBNull;
            }
            
            public AgentsRow[] GetAgentsRows() {
                return ((AgentsRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Customers_Agents"])));
            }
        }
        
        public class CompaniesRowChangeEvent : System.EventArgs {
            
            private CompaniesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CompaniesRowChangeEvent(CompaniesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompaniesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ZonesRowChangeEvent : System.EventArgs {
            
            private ZonesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ZonesRowChangeEvent(ZonesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ZonesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class AgentsRowChangeEvent : System.EventArgs {
            
            private AgentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AgentsRowChangeEvent(AgentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ListingsRowChangeEvent : System.EventArgs {
            
            private ListingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ListingsRowChangeEvent(ListingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ListingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class VoiceMailRowChangeEvent : System.EventArgs {
            
            private VoiceMailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public VoiceMailRowChangeEvent(VoiceMailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VoiceMailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class AgentPhoneLookupRowChangeEvent : System.EventArgs {
            
            private AgentPhoneLookupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AgentPhoneLookupRowChangeEvent(AgentPhoneLookupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentPhoneLookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class VoiceMailFilesRowChangeEvent : System.EventArgs {
            
            private VoiceMailFilesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public VoiceMailFilesRowChangeEvent(VoiceMailFilesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VoiceMailFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class AgentPrefixLookupRowChangeEvent : System.EventArgs {
            
            private AgentPrefixLookupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AgentPrefixLookupRowChangeEvent(AgentPrefixLookupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentPrefixLookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ListingLookupRowChangeEvent : System.EventArgs {
            
            private ListingLookupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ListingLookupRowChangeEvent(ListingLookupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ListingLookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ListingFilesRowChangeEvent : System.EventArgs {
            
            private ListingFilesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ListingFilesRowChangeEvent(ListingFilesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ListingFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ListingCallLogRowChangeEvent : System.EventArgs {
            
            private ListingCallLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ListingCallLogRowChangeEvent(ListingCallLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ListingCallLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CompanyFilesRowChangeEvent : System.EventArgs {
            
            private CompanyFilesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CompanyFilesRowChangeEvent(CompanyFilesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompanyFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class AgentFilesRowChangeEvent : System.EventArgs {
            
            private AgentFilesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AgentFilesRowChangeEvent(AgentFilesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AgentFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CompanyPhoneLookupRowChangeEvent : System.EventArgs {
            
            private CompanyPhoneLookupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CompanyPhoneLookupRowChangeEvent(CompanyPhoneLookupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompanyPhoneLookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CustomersRowChangeEvent : System.EventArgs {
            
            private CustomersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CustomersRowChangeEvent(CustomersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CustomersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
